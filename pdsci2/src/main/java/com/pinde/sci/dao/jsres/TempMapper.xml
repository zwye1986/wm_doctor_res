<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinde.sci.dao.jsres.TempMapper">
    <select id="insertAuditInfo">
        call jsres_org_tea_audit_pro()
    </select>
    <select id="callDeptDetail">
        call JSRES_DOCTOR_DEPT_DETAIL_PRO()
    </select>

    <update id="updateRecruitAsseInfo">
      update jsres_graduation_apply dr set (MATERIAL_ID,PRACTICING_SCOPE_ID,PRACTICING_SCOPE_NAME,CERTIFICATE_URI
        ,QUALIFICATION_MATERIAL_URI,SPECIAL_CERTIFICATION_URI,QUALIFICATION_MATERIAL_CODE,TYPE_ID,REGISTE_MANUA)=
        (
         SELECT CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialId/text()')
                  .getstringval()
                 ELSE
                  ''
               END MATERIAL_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeId/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeName/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_NAME,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//certificateUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END CERTIFICATE_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//specialCertificationUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END SPECIAL_CERTIFICATION_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialCode/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_CODE,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingCategoryId/text()')
                  .getstringval()
                 ELSE
                  ''
               END TYPE_ID,
			   CASE
                WHEN USER_RESUME IS NOT NULL THEN
                xmltype(USER_RESUME).extract('//registeManua/text()')
                .getstringval()
                ELSE
                ''
                END REGISTE_MANUA
          FROM PUB_USER_RESUME
         WHERE RECORD_STATUS = 'Y' and user_flow=(select doctor_flow from res_doctor_recruit where recruit_flow=dr.recruit_flow)
        )
        WHERE DR.RECORD_STATUS='Y' AND DR.APPLY_YEAR=#{applyYear}
    </update>
    <update id="updateRecruitAsseInfoByApplyYear">
      update jsres_graduation_apply dr set (MATERIAL_ID,PRACTICING_SCOPE_ID,PRACTICING_SCOPE_NAME,CERTIFICATE_URI
        ,QUALIFICATION_MATERIAL_URI,SPECIAL_CERTIFICATION_URI,QUALIFICATION_MATERIAL_CODE,TYPE_ID,REGISTE_MANUA)=
        (
         SELECT CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialId/text()')
                  .getstringval()
                 ELSE
                  ''
               END MATERIAL_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeId/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeName/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_NAME,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//certificateUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END CERTIFICATE_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//specialCertificationUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END SPECIAL_CERTIFICATION_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialCode/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_CODE,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingCategoryId/text()')
                  .getstringval()
                 ELSE
                  ''
               END TYPE_ID,
			   CASE
                WHEN USER_RESUME IS NOT NULL THEN
                xmltype(USER_RESUME).extract('//registeManua/text()')
                .getstringval()
                ELSE
                ''
                END REGISTE_MANUA
          FROM PUB_USER_RESUME
         WHERE RECORD_STATUS = 'Y'
          and user_flow=#{doctorFlow}
        )
        WHERE DR.RECORD_STATUS='Y' AND APPLY_FLOW=#{applyFlow}
    </update>
    <update id="updateRecruitAsseInfoByApplyYear2">
      update jsres_graduation_apply dr set (MATERIAL_ID,PRACTICING_SCOPE_ID,PRACTICING_SCOPE_NAME,CERTIFICATE_URI
        ,QUALIFICATION_MATERIAL_URI,SPECIAL_CERTIFICATION_URI,QUALIFICATION_MATERIAL_CODE,TYPE_ID,REGISTE_MANUA,
          GRADUATION_MATERIAL_ID ,
          GRADUATION_MATERIAL_NAME ,
          GRADUATION_MATERIAL_TIME ,
          GRADUATION_MATERIAL_CODE ,
          GRADUATION_MATERIAL_URI ,
          GRADUATION_CATEGORY_ID ,
          GRADUATION_CATEGORY_NAME ,
          GRADUATION_SCOPE_ID ,
		  GRADUATION_SCOPE_NAME )=
        (
         SELECT CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialId/text()')
                  .getstringval()
                 ELSE
                  ''
               END MATERIAL_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeId/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_ID,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingScopeName/text()')
                  .getstringval()
                 ELSE
                  ''
               END PRACTICING_SCOPE_NAME,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//certificateUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END CERTIFICATE_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//specialCertificationUri/text()')
                  .getstringval()
                 ELSE
                  ''
               END SPECIAL_CERTIFICATION_URI,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//qualificationMaterialCode/text()')
                  .getstringval()
                 ELSE
                  ''
               END QUALIFICATION_MATERIAL_CODE,
               CASE
                 WHEN USER_RESUME IS NOT NULL THEN
                  xmltype(USER_RESUME).extract('//practicingCategoryId/text()')
                  .getstringval()
                 ELSE
                  ''
               END TYPE_ID,
			   CASE
                WHEN USER_RESUME IS NOT NULL THEN
                xmltype(USER_RESUME).extract('//registeManua/text()')
                .getstringval()
                ELSE
                ''
                END REGISTE_MANUA,
                #{graduationMaterialId,jdbcType=VARCHAR},
				#{graduationMaterialName,jdbcType=VARCHAR},
				#{graduationMaterialTime,jdbcType=VARCHAR},
				#{graduationMaterialCode,jdbcType=VARCHAR},
				#{graduationMaterialUri,jdbcType=VARCHAR},
				#{graduationCategoryId,jdbcType=VARCHAR},
				#{graduationCategoryName,jdbcType=VARCHAR},
				#{graduationScopeId,jdbcType=VARCHAR},
				#{graduationScopeName,jdbcType=VARCHAR}
          FROM PUB_USER_RESUME
         WHERE RECORD_STATUS = 'Y'
          and user_flow=#{doctorFlow,jdbcType=VARCHAR}
        )
        WHERE DR.RECORD_STATUS='Y' AND APPLY_FLOW=#{applyFlow,jdbcType=VARCHAR}
    </update>
    <update id="updateRecruitAvgTemp">
        update JSRES_GRADUATION_APPLY dr set
        AVG_COMPLETE=( select nvl(AVG_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= dr.recruit_flow),
        AVG_OUT_COMPLETE=( select nvl(AVG_OUT_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= dr.recruit_flow),
        AVG_IN_COMPLETE=( select nvl(AVG_IN_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= dr.recruit_flow),
        AVG_AUDIT=( select nvl(AVG_AUDIT,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= dr.recruit_flow)
        WHERE DR.RECORD_STATUS='Y' AND DR.APPLY_YEAR=#{applyYear}
    </update>
    <delete id="deleteDeptDetailByApplyYear">
        delete from jsres_doctor_dept_detail where doctor_flow=#{doctorFlow} and apply_year=#{applyYear}
    </delete>
    <delete id="deleteDeptDetail">
        delete from jsres_doctor_dept_detail where  apply_year=#{applyYear}
    </delete>
    <insert id="insetDeptDetailByApplyYear">
       insert into JSRES_DOCTOR_DEPT_DETAIL
    (RECORD_FLOW,
     RECRUIT_FLOW,
     DOCTOR_FLOW,
     CAT_SPE_ID,
     CAT_SPE_NAME,
     SPE_ID,
     SPE_NAME,
     TRAIN_YEAR,
     SESSION_NUMBER,
     ROTATION_FLOW,
     SCH_STANDARD_DEPT_FLOW,
     GROUP_FLOW,
     STANDARD_DEPT_ID,
     STANDARD_DEPT_NAME,
     SCH_MONTH,
     ORG_FLOW,
     ORG_NAME,
     COMPLETE_NUM,
     OUT_COMPLETE_NUM,
     IN_COMPLETE_NUM,
     AUDIT_NUM,
     IS_SHORT,
     REQ_NUM,
     OLD_REQ_NUM,
     COMPLETE_BI,
     OUT_COMPLETE_BI,
     IN_COMPLETE_BI,
     COMPLETE_BI_PER,
     OUT_COMPLETE_BI_PER,
     IN_COMPLETE_BI_PER,
     AUDIT_BI,
     APPLY_YEAR,
     RECORD_STATUS,
     CREATE_TIME,
     CREATE_USER_FLOW,
     MODIFY_TIME,
     MODIFY_USER_FLOW,
           IS_ADD)
    SELECT sys_guid(),
           A.RECRUIT_FLOW,
           A.DOCTOR_FLOW,
           A.CAT_SPE_ID,
           A.CAT_SPE_NAME,
           A.SPE_ID,
           A.SPE_NAME,
           A.TRAIN_YEAR,
           A.SESSION_NUMBER,
           A.ROTATION_FLOW,
           A.RECORD_FLOW,
           A.GROUP_FLOW,
           A.STANDARD_DEPT_ID,
           A.STANDARD_DEPT_NAME,
           A.SCH_MONTH,
           A.ORG_FLOW,
           A.ORG_NAME,
           A.COMPLETE_NUM,
           A.OUT_COMPLETE_NUM,
           A.IN_COMPLETE_NUM,
           A.AUDIT_NUM,
           A.IS_SHORT,
           TO_CHAR(A.REQ_NUM) REQ_NUM,
           TO_CHAR(A.OLD_REQ_NUM) OLD_REQ_NUM,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END OUT_COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END IN_COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(case when COMPLETE_NUM / REQ_NUM >1 then 1 else  COMPLETE_NUM / REQ_NUM end, 2) * 100)
           END COMPLETE_BI_PER,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(case when OUT_COMPLETE_NUM / REQ_NUM >1 then 1 else OUT_COMPLETE_NUM / REQ_NUM end, 2) * 100)
           END OUT_COMPLETE_BI_PER,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(case when IN_COMPLETE_NUM / REQ_NUM >1 then 1 else IN_COMPLETE_NUM / REQ_NUM end, 2) * 100)
           END IN_COMPLETE_BI_PER,

           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(CASE
                              WHEN REQ_NUM != 0 AND COMPLETE_NUM = 0 THEN
                               0
                              WHEN COMPLETE_NUM != 0 THEN
                               AUDIT_NUM / COMPLETE_NUM
                              ELSE
                               0
                            END,
                            2) * 100)
           END AUDIT_BI,
           #{applyYear},
           'Y',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           IS_ADD
      FROM (SELECT RD.RECRUIT_FLOW,
                   RD.DOCTOR_FLOW,
                   RD.CAT_SPE_ID,
                   RD.CAT_SPE_NAME,
                   RD.SPE_ID,
                   RD.SPE_NAME,
                   RD.TRAIN_YEAR,
                   RD.SESSION_NUMBER,
                   RD.ROTATION_FLOW,
                   SRD.RECORD_FLOW,
                   SRD.GROUP_FLOW,
                   SRD.STANDARD_DEPT_ID,
                   SRD.STANDARD_DEPT_NAME,
                   SRD.SCH_MONTH,
                   RD.ORG_FLOW,
                   RD.ORG_NAME,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0)) COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.IN_COMPLETE_NUM, 0)) IN_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0) -
                           NVL(COMP.IN_COMPLETE_NUM, 0)) OUT_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.AUDIT_NUM, 0)) AUDIT_NUM,
                   case
                     when (SELECT COUNT(1)
                             FROM sch_doctor_dept sdd
                            WHERE sdd.record_status = 'Y'
                              AND sdd.doctor_flow = RD.doctor_flow
                              AND sdd.rotation_flow = RD.rotation_flow
                              and sdd.group_flow = srd.group_flow
                              and sdd.standard_dept_id = srd.standard_dept_id
                              AND sdd.org_flow = RD.org_flow) > 0 then
                      'Y'
                     else
                      'N'
                   end is_short,
                   NVL((CASE
                         WHEN RD.cat_spe_id = 'DoctorTrainingSpe' AND
                              RD.session_number >= '2015' AND
                              (RD.train_year = 'OneYear' OR
                              RD.train_year = 'TwoYear') AND
                              (SELECT COUNT(1)
                                 FROM sch_doctor_dept sdd
                                WHERE sdd.record_status = 'Y'
                                  AND sdd.doctor_flow = RD.doctor_flow
                                  AND sdd.rotation_flow = RD.rotation_flow
                                  AND sdd.org_flow = RD.org_flow) > 0 THEN
                          SUM(NVL(ROUND((CASE
                                          WHEN NVL(SRD.SCH_MONTH, 0) = 0 THEN
                                           0
                                          ELSE
                                           NVL(SDD.SCH_MONTH, 0) / SRD.SCH_MONTH * REQ.REQ_NUM
                                        END),
                                        0),
                                  0))
                         ELSE
                          SUM(REQ.REQ_NUM)
                       END),
                       0) AS REQ_NUM,
                   NVL(SUM(REQ.REQ_NUM), 0) OLD_REQ_NUM,
                   CASE WHEN IC.QTY>0 THEN 'Y'
                     ELSE 'N'
                       END IS_ADD
              FROM (SELECT * FROM RES_DOCTOR_RECRUIT rdr
              WHERE rdr.DOCTOR_FLOW = #{doctorFlow}
		        AND rdr.RECRUIT_FLOW = #{recruitFlow}
		        AND RDr.RECORD_STATUS = 'Y'
		        AND rdr.rotation_flow = #{rotationFlow}
		        AND RDr.AUDIT_STATUS_ID = 'Passed') RD
              LEFT JOIN SCH_ROTATION_DEPT SRD
                ON RD.ROTATION_FLOW = SRD.ROTATION_FLOW
               AND SRD.ORG_FLOW IS NULL
               AND SRD.RECORD_STATUS = 'Y'
              LEFT JOIN SCH_ROTATION_DEPT_REQ REQ
                ON REQ.REL_RECORD_FLOW = SRD.RECORD_FLOW
                and REQ.rotation_flow = #{rotationFlow}
               AND REQ.RECORD_STATUS = 'Y'
               AND REQ.REC_TYPE_ID IN
                   ('CaseRegistry',
                    'DiseaseRegistry',
                    'SkillRegistry',
                    'OperationRegistry',
                    'CampaignRegistry')
              LEFT JOIN SCH_DOCTOR_DEPT SDD
                ON SDD.GROUP_FLOW = SRD.GROUP_FLOW
               AND SDD.STANDARD_DEPT_ID = SRD.STANDARD_DEPT_ID
               AND SDD.ORG_FLOW = RD.ORG_FLOW
               AND SDD.DOCTOR_FLOW = #{doctorFlow}
               AND SDD.RECORD_STATUS = 'Y'
              LEFT JOIN (SELECT COUNT(1) COMPLETE_NUM,
                               RR.OPER_USER_FLOW,
                               rr.SCH_ROTATION_DEPT_FLOW,
                               NVL(COUNT(RR.AUDIT_STATUS_ID), 0) AUDIT_NUM,
                               SUM(CASE
                                     WHEN NVL((SELECT COUNT(1)
                                                FROM RES_DOCTOR_SCH_PROCESS SAR
                                               WHERE SAR.RECORD_STATUS = 'Y'
                                                 AND SAR.USER_FLOW = #{doctorFlow}
                                                 AND SAR.PROCESS_FLOW=RR.PROCESS_FLOW
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') <![CDATA[<=]]>
                                                     SAR.SCH_END_DATE
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') >=
                                                     SAR.SCH_START_DATE),
                                              0) > 0 THEN
                                      1
                                     ELSE
                                      0
                                   END) IN_COMPLETE_NUM
                          FROM RES_REC rr, SCH_ROTATION_DEPT srd
                         WHERE rr.RECORD_STATUS = 'Y'
                         AND srd.rotation_flow = #{rotationFlow}
                         and rr.SCH_ROTATION_DEPT_FLOW = srd.RECORD_FLOW
                         AND RR.OPER_USER_FLOW = #{doctorFlow}
                           AND srd.RECORD_STATUS = 'Y'
                           AND rr.REC_TYPE_ID IN
                               ('CaseRegistry',
                                'DiseaseRegistry',
                                'SkillRegistry',
                                'OperationRegistry',
                                'CampaignRegistry')
                         GROUP BY rr.SCH_ROTATION_DEPT_FLOW,
                                  RR.OPER_USER_FLOW) COMP
                ON COMP.SCH_ROTATION_DEPT_FLOW = srd.record_flow
               and COMP.OPER_USER_FLOW = RD.DOCTOR_FLOW
               LEFT JOIN (
                 SELECT R.DOCTOR_FLOW,
                        R.ROTATION_FLOW,
                        D.RECORD_FLOW,
                        COUNT(1) QTY
                   FROM SCH_ARRANGE_RESULT R
                   LEFT JOIN SCH_ROTATION_DEPT D
                     ON R.STANDARD_DEPT_ID = D.STANDARD_DEPT_ID
                    AND D.GROUP_FLOW = R.STANDARD_GROUP_FLOW
                  WHERE  R.DOCTOR_FLOW = #{doctorFlow}
                    AND R.RECORD_STATUS = 'Y'
                    AND D.RECORD_STATUS = 'Y'
                    AND R.SCH_END_DATE <![CDATA[<]]> #{applyYear}||'-05-31'
                  GROUP BY R.DOCTOR_FLOW, R.ROTATION_FLOW, D.RECORD_FLOW
               ) IC
               ON IC.RECORD_FLOW= srd.record_flow
               and IC.DOCTOR_FLOW = RD.DOCTOR_FLOW
               AND IC.ROTATION_FLOW=SRD.ROTATION_FLOW
             GROUP BY RD.RECRUIT_FLOW,
                      RD.DOCTOR_FLOW,
                      RD.CAT_SPE_ID,
                      RD.CAT_SPE_NAME,
                      RD.SPE_ID,
                      RD.SPE_NAME,
                      RD.TRAIN_YEAR,
                      RD.SESSION_NUMBER,
                      RD.ROTATION_FLOW,
                      SRD.RECORD_FLOW,
                      SRD.GROUP_FLOW,
                      SRD.STANDARD_DEPT_ID,
                      SRD.STANDARD_DEPT_NAME,
                      SRD.SCH_MONTH,
                      RD.ORG_FLOW,
                      RD.ORG_NAME,
                      COMP.COMPLETE_NUM,
                      COMP.IN_COMPLETE_NUM,
                      COMP.AUDIT_NUM,
                      IC.QTY) A
    </insert>
    <insert id="insertDeptDetail">
       insert into JSRES_DOCTOR_DEPT_DETAIL
    (RECORD_FLOW,
     RECRUIT_FLOW,
     DOCTOR_FLOW,
     CAT_SPE_ID,
     CAT_SPE_NAME,
     SPE_ID,
     SPE_NAME,
     TRAIN_YEAR,
     SESSION_NUMBER,
     ROTATION_FLOW,
     SCH_STANDARD_DEPT_FLOW,
     GROUP_FLOW,
     STANDARD_DEPT_ID,
     STANDARD_DEPT_NAME,
     SCH_MONTH,
     ORG_FLOW,
     ORG_NAME,
     COMPLETE_NUM,
     OUT_COMPLETE_NUM,
     IN_COMPLETE_NUM,
     AUDIT_NUM,
     IS_SHORT,
     REQ_NUM,
     OLD_REQ_NUM,
     COMPLETE_BI,
     OUT_COMPLETE_BI,
     IN_COMPLETE_BI,
     AUDIT_BI,
     APPLY_YEAR,
     RECORD_STATUS,
     CREATE_TIME,
     CREATE_USER_FLOW,
     MODIFY_TIME,
     MODIFY_USER_FLOW,
           IS_ADD)
    SELECT sys_guid(),
           A.RECRUIT_FLOW,
           A.DOCTOR_FLOW,
           A.CAT_SPE_ID,
           A.CAT_SPE_NAME,
           A.SPE_ID,
           A.SPE_NAME,
           A.TRAIN_YEAR,
           A.SESSION_NUMBER,
           A.ROTATION_FLOW,
           A.RECORD_FLOW,
           A.GROUP_FLOW,
           A.STANDARD_DEPT_ID,
           A.STANDARD_DEPT_NAME,
           A.SCH_MONTH,
           A.ORG_FLOW,
           A.ORG_NAME,
           A.COMPLETE_NUM,
           A.OUT_COMPLETE_NUM,
           A.IN_COMPLETE_NUM,
           A.AUDIT_NUM,
           A.IS_SHORT,
           TO_CHAR(A.REQ_NUM) REQ_NUM,
           TO_CHAR(A.OLD_REQ_NUM) OLD_REQ_NUM,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END OUT_COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END IN_COMPLETE_BI,

           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(CASE
                              WHEN REQ_NUM != 0 AND COMPLETE_NUM = 0 THEN
                               0
                              WHEN COMPLETE_NUM != 0 THEN
                               AUDIT_NUM / COMPLETE_NUM
                              ELSE
                               0
                            END,
                            2) * 100)
           END AUDIT_BI,
           #{applyYear},
           'Y',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           IS_ADD
      FROM (SELECT RD.RECRUIT_FLOW,
                   RD.DOCTOR_FLOW,
                   RD.CAT_SPE_ID,
                   RD.CAT_SPE_NAME,
                   RD.SPE_ID,
                   RD.SPE_NAME,
                   RD.TRAIN_YEAR,
                   RD.SESSION_NUMBER,
                   RD.ROTATION_FLOW,
                   SRD.RECORD_FLOW,
                   SRD.GROUP_FLOW,
                   SRD.STANDARD_DEPT_ID,
                   SRD.STANDARD_DEPT_NAME,
                   SRD.SCH_MONTH,
                   RD.ORG_FLOW,
                   RD.ORG_NAME,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0)) COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.IN_COMPLETE_NUM, 0)) IN_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0) -
                           NVL(COMP.IN_COMPLETE_NUM, 0)) OUT_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.AUDIT_NUM, 0)) AUDIT_NUM,
                   case
                     when (SELECT COUNT(1)
                             FROM sch_doctor_dept sdd
                            WHERE sdd.record_status = 'Y'
                              AND sdd.doctor_flow = RD.doctor_flow
                              AND sdd.rotation_flow = RD.rotation_flow
                              and sdd.group_flow = srd.group_flow
                              and sdd.standard_dept_id = srd.standard_dept_id
                              AND sdd.org_flow = RD.org_flow) > 0 then
                      'Y'
                     else
                      'N'
                   end is_short,
                   NVL((CASE
                         WHEN RD.cat_spe_id = 'DoctorTrainingSpe' AND
                              RD.session_number >= '2015' AND
                              (RD.train_year = 'OneYear' OR
                              RD.train_year = 'TwoYear') AND
                              (SELECT COUNT(1)
                                 FROM sch_doctor_dept sdd
                                WHERE sdd.record_status = 'Y'
                                  AND sdd.doctor_flow = RD.doctor_flow
                                  AND sdd.rotation_flow = RD.rotation_flow
                                  AND sdd.org_flow = RD.org_flow) > 0 THEN
                          SUM(NVL(ROUND((CASE
                                          WHEN NVL(SRD.SCH_MONTH, 0) = 0 THEN
                                           0
                                          ELSE
                                           NVL(SDD.SCH_MONTH, 0) / SRD.SCH_MONTH * REQ.REQ_NUM
                                        END),
                                        0),
                                  0))
                         ELSE
                          SUM(REQ.REQ_NUM)
                       END),
                       0) AS REQ_NUM,
                   NVL(SUM(REQ.REQ_NUM), 0) OLD_REQ_NUM,
                   CASE WHEN IC.QTY>0 THEN 'Y'
                     ELSE 'N'
                       END IS_ADD
              FROM res_doctor_recruit RD
              LEFT JOIN SCH_ROTATION_DEPT SRD
                ON RD.ROTATION_FLOW = SRD.ROTATION_FLOW
               AND SRD.ORG_FLOW IS NULL
               AND SRD.RECORD_STATUS = 'Y'
              LEFT JOIN SCH_ROTATION_DEPT_REQ REQ
                ON REQ.REL_RECORD_FLOW = SRD.RECORD_FLOW
               AND REQ.RECORD_STATUS = 'Y'
               AND REQ.REC_TYPE_ID IN
                   ('CaseRegistry',
                    'DiseaseRegistry',
                    'SkillRegistry',
                    'OperationRegistry',
                    'CampaignRegistry')
              LEFT JOIN SCH_DOCTOR_DEPT SDD
                ON SDD.GROUP_FLOW = SRD.GROUP_FLOW
               AND SDD.STANDARD_DEPT_ID = SRD.STANDARD_DEPT_ID
               AND SDD.ORG_FLOW = RD.ORG_FLOW
               AND SDD.DOCTOR_FLOW = RD.DOCTOR_FLOW
               AND SDD.RECORD_STATUS = 'Y'
              LEFT JOIN (SELECT COUNT(1) COMPLETE_NUM,
                               RR.OPER_USER_FLOW,
                               rr.SCH_ROTATION_DEPT_FLOW,
                               NVL(COUNT(RR.AUDIT_STATUS_ID), 0) AUDIT_NUM,
                               SUM(CASE
                                     WHEN NVL((SELECT COUNT(1)
                                                FROM RES_DOCTOR_SCH_PROCESS SAR
                                               WHERE SAR.RECORD_STATUS = 'Y'
                                                 AND SAR.USER_FLOW =
                                                     RR.OPER_USER_FLOW
                                                 AND SAR.PROCESS_FLOW=RR.PROCESS_FLOW
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') <![CDATA[<=]]>
                                                     SAR.SCH_END_DATE
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') >=
                                                     SAR.SCH_START_DATE),
                                              0) > 0 THEN
                                      1
                                     ELSE
                                      0
                                   END) IN_COMPLETE_NUM
                          FROM RES_REC rr
                         INNER JOIN SCH_ROTATION_DEPT srd
                            ON rr.SCH_ROTATION_DEPT_FLOW = srd.RECORD_FLOW
                         WHERE rr.RECORD_STATUS = 'Y'
                           AND srd.RECORD_STATUS = 'Y'
                           AND rr.REC_TYPE_ID IN
                               ('CaseRegistry',
                                'DiseaseRegistry',
                                'SkillRegistry',
                                'OperationRegistry',
                                'CampaignRegistry')
                         GROUP BY rr.SCH_ROTATION_DEPT_FLOW,
                                  RR.OPER_USER_FLOW) COMP
                ON COMP.SCH_ROTATION_DEPT_FLOW = srd.record_flow
               and COMP.OPER_USER_FLOW = RD.DOCTOR_FLOW
               LEFT JOIN (
                 SELECT R.DOCTOR_FLOW,
                        R.ROTATION_FLOW,
                        D.RECORD_FLOW,
                        COUNT(1) QTY
                   FROM SCH_ARRANGE_RESULT R
                   LEFT JOIN SCH_ROTATION_DEPT D
                     ON R.STANDARD_DEPT_ID = D.STANDARD_DEPT_ID
                    AND D.GROUP_FLOW = R.STANDARD_GROUP_FLOW
                  WHERE R.RECORD_STATUS = 'Y'
                    AND D.RECORD_STATUS = 'Y'
                  GROUP BY R.DOCTOR_FLOW, R.ROTATION_FLOW, D.RECORD_FLOW
               ) IC
               ON IC.RECORD_FLOW= srd.record_flow
               and IC.DOCTOR_FLOW = RD.DOCTOR_FLOW
               AND IC.ROTATION_FLOW=SRD.ROTATION_FLOW
             WHERE RD.RECORD_STATUS = 'Y'
               AND RD.AUDIT_STATUS_ID = 'Passed'
             GROUP BY RD.RECRUIT_FLOW,
                      RD.DOCTOR_FLOW,
                      RD.CAT_SPE_ID,
                      RD.CAT_SPE_NAME,
                      RD.SPE_ID,
                      RD.SPE_NAME,
                      RD.TRAIN_YEAR,
                      RD.SESSION_NUMBER,
                      RD.ROTATION_FLOW,
                      SRD.RECORD_FLOW,
                      SRD.GROUP_FLOW,
                      SRD.STANDARD_DEPT_ID,
                      SRD.STANDARD_DEPT_NAME,
                      SRD.SCH_MONTH,
                      RD.ORG_FLOW,
                      RD.ORG_NAME,
                      COMP.COMPLETE_NUM,
                      COMP.IN_COMPLETE_NUM,
                      COMP.AUDIT_NUM,
                      IC.QTY) A
    </insert>
    <delete id="deleteUriAuditInfo">
        delete from JSRES_org_teacher_audit_TEMP
    </delete>
    <delete id="deleteDeptTemp">
        delete from JSRES_DOCTOR_DEPT_TEMP
    </delete>
    <insert id="updateDeptTemp">
        insert into JSRES_DOCTOR_DEPT_TEMP
        (RECORD_FLOW,
        RECRUIT_FLOW,
        HAVE_SHORT)
        SELECT sys_guid(),RECRUIT_FLOW,HAVE_SHORT FROM (
        SELECT RECRUIT_FLOW,CASE WHEN COUNT(DISTINCT IS_SHORT)>1
        THEN
        'Y'
        ELSE
        'YN'
        END HAVE_SHORT FROM
        JSRES_DOCTOR_DEPT_DETAIL WHERE RECORD_STATUS='Y'
        GROUP BY RECRUIT_FLOW) A
    </insert>
    <delete id="deleteDeptTempByRecruitFlow">
        delete from JSRES_DOCTOR_DEPT_TEMP where RECRUIT_FLOW=#{recruitFlow}
    </delete>
    <insert id="updateDeptTempByRecruitFlow">
        insert into JSRES_DOCTOR_DEPT_TEMP
        (RECORD_FLOW,
        RECRUIT_FLOW,
        HAVE_SHORT)
        SELECT sys_guid(),RECRUIT_FLOW,HAVE_SHORT FROM (
        SELECT RECRUIT_FLOW,CASE WHEN COUNT(DISTINCT IS_SHORT)>1
        THEN
        'Y'
        ELSE
        'YN'
        END HAVE_SHORT FROM
        JSRES_DOCTOR_DEPT_DETAIL WHERE RECORD_STATUS='Y'
        and RECRUIT_FLOW=#{recruitFlow,jdbcType=VARCHAR} and apply_year=#{applyYear,jdbcType=VARCHAR}
        GROUP BY RECRUIT_FLOW) A
    </insert>
    <delete id="deleteDeptAvgTemp">
        delete from JSRES_DOCTOR_DEPT_AVG_TEMP
    </delete>
    <insert id="updateDeptAvgTemp">
        insert into JSRES_DOCTOR_DEPT_AVG_TEMP
        (RECORD_FLOW,
         RECRUIT_FLOW,AVG_COMPLETE,AVG_AUDIT)
         SELECT sys_guid(),RECRUIT_FLOW,AVG_COMPLETE,AVG_AUDIT FROM (
            SELECT T.RECRUIT_FLOW,
            NVL(ROUND(SUM(COMPLETE_BI) / COUNT(1),1),0) AVG_COMPLETE,
            NVL(ROUND(SUM(AUDIT_BI) / COUNT(1),1),0) AVG_AUDIT
            FROM JSRES_DOCTOR_DEPT_DETAIL T
            LEFT JOIN JSRES_DOCTOR_DEPT_TEMP S
            ON T.RECRUIT_FLOW=S.RECRUIT_FLOW
            WHERE COMPLETE_BI!='-'
            AND T.IS_ADD='Y'
            AND  INSTR(S.HAVE_SHORT,T.IS_SHORT)>0
            GROUP BY T.RECRUIT_FLOW) A
    </insert>
    <delete id="deleteDeptAvgTempByRecruitFlow">
        delete from JSRES_DOCTOR_DEPT_AVG_TEMP where RECRUIT_FLOW=#{recruitFlow}
    </delete>
    <insert id="updateDeptAvgTempByRecruitFlow">
        insert into JSRES_DOCTOR_DEPT_AVG_TEMP
        (RECORD_FLOW,
         RECRUIT_FLOW,AVG_COMPLETE,AVG_OUT_COMPLETE,AVG_IN_COMPLETE,AVG_COMPLETE_BI_PER,AVG_OUT_COMPLETE_BI_PER,AVG_IN_COMPLETE_BI_PER,AVG_AUDIT)
         SELECT sys_guid(),RECRUIT_FLOW,AVG_COMPLETE,AVG_OUT_COMPLETE,AVG_IN_COMPLETE,
         AVG_COMPLETE_PER,AVG_OUT_COMPLETE_PER,AVG_IN_COMPLETE_PER,AVG_AUDIT FROM (
            SELECT T.RECRUIT_FLOW,
            NVL(ROUND(SUM(COMPLETE_BI) / COUNT(1),1),0) AVG_COMPLETE,
            NVL(ROUND(SUM(OUT_COMPLETE_BI) / COUNT(1),1),0) AVG_OUT_COMPLETE,
            NVL(ROUND(SUM(IN_COMPLETE_BI) / COUNT(1),1),0) AVG_IN_COMPLETE,
            NVL(ROUND(SUM(COMPLETE_BI_PER) / COUNT(1),1),0) AVG_COMPLETE_PER,
            NVL(ROUND(SUM(OUT_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_OUT_COMPLETE_PER,
            NVL(ROUND(SUM(IN_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_IN_COMPLETE_PER,
            NVL(ROUND(SUM(AUDIT_BI) / COUNT(1),1),0) AVG_AUDIT
            FROM JSRES_DOCTOR_DEPT_DETAIL T
            LEFT JOIN JSRES_DOCTOR_DEPT_TEMP S
            ON T.RECRUIT_FLOW=S.RECRUIT_FLOW
            WHERE COMPLETE_BI!='-'
            AND  INSTR(S.HAVE_SHORT,T.IS_SHORT)>0
            AND T.IS_ADD='Y'
            and T.RECRUIT_FLOW = #{recruitFlow,jdbcType=VARCHAR} and t.apply_year=#{applyYear,jdbcType=VARCHAR}
            GROUP BY T.RECRUIT_FLOW) A
    </insert>

    <update id="updateRecruitAvgTempByRecruitFlow">
        update JSRES_GRADUATION_APPLY dr set
        AVG_COMPLETE=( select nvl(AVG_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_OUT_COMPLETE=( select nvl(AVG_OUT_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_IN_COMPLETE=( select nvl(AVG_IN_COMPLETE,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_COMPLETE_BI_PER=( select nvl(AVG_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_OUT_COMPLETE_BI_PER=( select nvl(AVG_OUT_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_IN_COMPLETE_BI_PER=( select nvl(AVG_IN_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR}),
        AVG_AUDIT=( select nvl(AVG_AUDIT,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow,jdbcType=VARCHAR})
        WHERE DR.RECORD_STATUS='Y' AND DR.APPLY_FLOW=#{applyFlow,jdbcType=VARCHAR}
    </update>
    <update id="saveRegisteManua">
        update JSRES_GRADUATION_APPLY dr set
        REGISTE_MANUA=#{registeManua}
        WHERE DR.RECORD_STATUS='Y' AND recruit_flow= #{recruitFlow} and apply_year=#{applyYear}
    </update>
    <update id="delProcessType">
        update res_sch_process_express set record_status='N',modify_user_flow='TEMP-delProcessType'
         where process_flow =#{processFlow}
         and record_status='Y' and rec_type_id=#{recTypeId}
    </update>
    <update id="delProcessTypeByFlow">
        update res_sch_process_express set record_status='N',modify_user_flow='TEMP-delProcessType'
         where rec_flow =#{recFlow}
         and record_status='Y'
    </update>

    <select id="searchRecByProcessWithBLOBsByDel"
            resultMap="com.pinde.core.common.sci.dao.ResSchProcessExpressMapper.BaseResultMap">
        SELECT *
        FROM RES_SCH_PROCESS_EXPRESS p
        where modify_user_flow='TEMP-delProcessType'
         and process_flow=#{processFlow}
         and record_status='N'
         and not exists(
            select 1 from res_sch_process_express e where
            record_status='Y' and p.process_flow=e.process_flow and p.rec_type_id=e.rec_type_id
         )
        <if test='recTypeIds!=null'>
            AND REC_TYPE_ID IN
            <foreach collection="recTypeIds" close=")" item="recTypeId" open="(" separator=",">
                #{recTypeId}
            </foreach>
        </if>
         order by create_time asc
    </select>
    <resultMap id="attendMap" type="hashmap">
        <result column="ATTENDANCE_FLOW" property="attendanceFlow" jdbcType="VARCHAR" />
        <result column="DOCTOR_FLOW" property="doctorFlow" jdbcType="VARCHAR" />
        <result column="DOCTOR_NAME" property="doctorName" jdbcType="VARCHAR" />
        <result column="ATTEND_DATE" property="attendDate" jdbcType="VARCHAR" />
        <result column="TEACHER_FLOW" property="teacherFlow" jdbcType="VARCHAR" />
        <result column="TEACHER_NAME" property="teacherName" jdbcType="VARCHAR" />
        <result column="ATTEND_STATUS" property="attendStatus" jdbcType="VARCHAR" />
        <result column="ATTEND_STATUS_NAME" property="attendStatusName" jdbcType="VARCHAR" />
        <result column="RECORD_STATUS" property="recordStatus" jdbcType="VARCHAR" />
        <result column="CREATE_TIME" property="createTime" jdbcType="VARCHAR" />
        <result column="CREATE_USER_FLOW" property="createUserFlow" jdbcType="VARCHAR" />
        <result column="MODIFY_TIME" property="modifyTime" jdbcType="VARCHAR" />
        <result column="MODIFY_USER_FLOW" property="modifyUserFlow" jdbcType="VARCHAR" />
        <result column="TEACHER_REMARKS" property="teacherRemarks" jdbcType="VARCHAR" />
        <result column="AUDIT_TIME" property="auditTime" jdbcType="VARCHAR" />
        <result column="AUDIT_USER_FLOW" property="auditUserFlow" jdbcType="VARCHAR" />
        <result column="AUDIT_USER_NAME" property="auditUserName" jdbcType="VARCHAR" />
        <result column="AUDIT_STATUS_ID" property="auditStatusId" jdbcType="VARCHAR" />
        <result column="AUDIT_STATUS_NAME" property="auditStatusName" jdbcType="VARCHAR" />
    </resultMap>
    <select id="afterAttendBackList"
            resultMap="attendMap">

        SELECT *
        FROM jsres_attendance
        where record_status='Y'
        and  audit_status_id!='Auditing'
        and doctor_flow=(
          select user_flow from sys_user where user_code=#{userCode} and record_status='Y'
        )
        and attend_date>=#{startDate} and attend_date<![CDATA[<=]]>#{endDate}
        order by attend_date
    </select>
    <update id="backProcessType">
        update res_sch_process_express set record_status='Y',modify_user_flow='TEMP-delProcessType'
         where process_flow =#{processFlow}
         and record_status='N' and rec_type_id=#{recTypeId} and modify_user_flow='TEMP-delProcessType'
    </update>
    <update id="backProcessTypeByFlow">
        update res_sch_process_express set record_status='Y',modify_user_flow='TEMP-delProcessType'
         where rec_flow =#{recFlow}
         and record_status='N'
    </update>
    <update id="delExpressNotType">
        update res_sch_process_express set record_status='N',modify_user_flow='TEMP-delProcessType'
         where process_flow =#{processFlow}
         and record_status='Y'
    </update>
    <update id="delProcess">
        update res_doctor_sch_process set record_status='N',modify_user_flow='TEMP-delProcess-delProcess'
         where process_flow =#{processFlow}
         and record_status='Y'
    </update>
    <update id="delRecNotType">
        update res_rec set record_status='N',modify_user_flow='TEMP-delProcess-delRecNotType'
         where process_flow =#{processFlow}
         and record_status='Y'
    </update>
    <update id="delResult">
        update sch_arrange_result set record_status='N',modify_user_flow='TEMP-delProcess-delResult'
         where result_flow in (
          select sch_result_flow from res_doctor_sch_process where process_flow =#{processFlow}
         )
         and record_status='Y'
    </update>
    <update id="backProcess">

        update res_doctor_sch_process set record_status='Y'
         where modify_user_flow='TEMP-delProcess-delProcess'
         and process_flow=#{processFlow}
         and record_status='N'
    </update>
    <update id="backExpressNotType">
        update res_sch_process_express p set record_status='Y'
         where modify_user_flow='TEMP-delProcessType'
         and process_flow=#{processFlow}
         and record_status='N'
         and not exists(
            select 1 from res_sch_process_express e where
            record_status='Y' and p.process_flow=e.process_flow and p.rec_type_id=e.rec_type_id
         )
    </update>
    <update id="backRecNotType">

        update res_rec set record_status='Y'
         where   record_status='N'
         and modify_user_flow='TEMP-delProcess-delRecNotType'
         and process_flow=#{processFlow}

    </update>
    <update id="backResult">
        update sch_arrange_result set record_status='Y'
         where modify_user_flow='TEMP-delProcess-delResult'
         and record_status='N'
         and  result_flow in (
          select sch_result_flow from res_doctor_sch_process where process_flow =#{processFlow}
         )
    </update>
    <update id="updateResultAfterPic">
        update sch_arrange_result sar set have_after_pic=#{haveAfterPic}
         where   record_status='Y'
         and sar.doctor_flow=#{operUserFlow}
         and  exists(
             select 1
             from sch_rotation_dept dept
             where sar.standard_group_flow = dept.group_flow
               AND sar.standard_dept_id = dept.standard_dept_id
               and dept.record_flow=#{processFlow}
         )
    </update>
    <update id="backAttend">
        update jsres_attendance set audit_status_id='Auditing',audit_status_name='待审核' where record_status='Y'
        and doctor_flow=(
          select user_flow from sys_user where user_code=#{userCode} and record_status='Y'
        )
        and attend_date>=#{startDate} and attend_date<![CDATA[<=]]>#{endDate}
    </update>
    <update id="backAttendByFlow">
        update jsres_attendance set audit_status_id='Auditing',audit_status_name='待审核' where record_status='Y'
       and attendance_flow =#{attendanceFlow}
    </update>
    <update id="updateDeptDetailPerByApplyYear">

update JSRES_DOCTOR_DEPT_DETAIL set
COMPLETE_BI_PER=(CASE
              WHEN COMPLETE_BI='-' THEN '-'
             WHEN nvl(COMPLETE_BI,0)>100 THEN
              '100'
             ELSE
              nvl(COMPLETE_BI,0)
           END ),
    OUT_COMPLETE_BI_PER=(       CASE
              WHEN OUT_COMPLETE_BI='-' THEN '-'
             WHEN nvl(OUT_COMPLETE_BI,0)>100 THEN
               '100'
             ELSE
              nvl(OUT_COMPLETE_BI,0)
           END) ,
      IN_COMPLETE_BI_PER=(   CASE
              WHEN IN_COMPLETE_BI='-' THEN '-'
             WHEN nvl(IN_COMPLETE_BI,0) >100 THEN
               '100'
             ELSE
              nvl(IN_COMPLETE_BI,0)
           END ) where apply_year=#{applyYear}
                and RECRUIT_FLOW =#{recruitFlow}
                and DOCTOR_FLOW =#{doctorFlow}
    </update>
    <update id="updateDeptAvgPerTempByRecruitFlow">
         UPDATE JSRES_DOCTOR_DEPT_AVG_TEMP SET
       AVG_COMPLETE_BI_PER=(SELECT
         AVG_COMPLETE_PER FROM (
            SELECT T.RECRUIT_FLOW,
            NVL(ROUND(SUM(COMPLETE_BI) / COUNT(1),1),0) AVG_COMPLETE,
            NVL(ROUND(SUM(OUT_COMPLETE_BI) / COUNT(1),1),0) AVG_OUT_COMPLETE,
            NVL(ROUND(SUM(IN_COMPLETE_BI) / COUNT(1),1),0) AVG_IN_COMPLETE,
            NVL(ROUND(SUM(COMPLETE_BI_PER) / COUNT(1),1),0) AVG_COMPLETE_PER,
            NVL(ROUND(SUM(OUT_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_OUT_COMPLETE_PER,
            NVL(ROUND(SUM(IN_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_IN_COMPLETE_PER,
            NVL(ROUND(SUM(AUDIT_BI) / COUNT(1),1),0) AVG_AUDIT
            FROM JSRES_DOCTOR_DEPT_DETAIL T
            LEFT JOIN JSRES_DOCTOR_DEPT_TEMP S
            ON T.RECRUIT_FLOW=S.RECRUIT_FLOW
            WHERE COMPLETE_BI!='-'
            AND  INSTR(S.HAVE_SHORT,T.IS_SHORT)>0
            AND T.IS_ADD='Y'
            and T.RECRUIT_FLOW = #{recruitFlow} and t.apply_year=#{applyYear}
            GROUP BY T.RECRUIT_FLOW) A),
       AVG_OUT_COMPLETE_BI_PER=(SELECT
         AVG_OUT_COMPLETE_PER FROM (
            SELECT T.RECRUIT_FLOW,
            NVL(ROUND(SUM(COMPLETE_BI) / COUNT(1),1),0) AVG_COMPLETE,
            NVL(ROUND(SUM(OUT_COMPLETE_BI) / COUNT(1),1),0) AVG_OUT_COMPLETE,
            NVL(ROUND(SUM(IN_COMPLETE_BI) / COUNT(1),1),0) AVG_IN_COMPLETE,
            NVL(ROUND(SUM(COMPLETE_BI_PER) / COUNT(1),1),0) AVG_COMPLETE_PER,
            NVL(ROUND(SUM(OUT_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_OUT_COMPLETE_PER,
            NVL(ROUND(SUM(IN_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_IN_COMPLETE_PER,
            NVL(ROUND(SUM(AUDIT_BI) / COUNT(1),1),0) AVG_AUDIT
            FROM JSRES_DOCTOR_DEPT_DETAIL T
            LEFT JOIN JSRES_DOCTOR_DEPT_TEMP S
            ON T.RECRUIT_FLOW=S.RECRUIT_FLOW
            WHERE COMPLETE_BI!='-'
            AND  INSTR(S.HAVE_SHORT,T.IS_SHORT)>0
            AND T.IS_ADD='Y'
            and T.RECRUIT_FLOW = #{recruitFlow} and t.apply_year=#{applyYear}
            GROUP BY T.RECRUIT_FLOW) A),
       AVG_IN_COMPLETE_BI_PER=(SELECT
          AVG_IN_COMPLETE_PER FROM (
            SELECT T.RECRUIT_FLOW,
            NVL(ROUND(SUM(COMPLETE_BI) / COUNT(1),1),0) AVG_COMPLETE,
            NVL(ROUND(SUM(OUT_COMPLETE_BI) / COUNT(1),1),0) AVG_OUT_COMPLETE,
            NVL(ROUND(SUM(IN_COMPLETE_BI) / COUNT(1),1),0) AVG_IN_COMPLETE,
            NVL(ROUND(SUM(COMPLETE_BI_PER) / COUNT(1),1),0) AVG_COMPLETE_PER,
            NVL(ROUND(SUM(OUT_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_OUT_COMPLETE_PER,
            NVL(ROUND(SUM(IN_COMPLETE_BI_PER) / COUNT(1),1),0) AVG_IN_COMPLETE_PER,
            NVL(ROUND(SUM(AUDIT_BI) / COUNT(1),1),0) AVG_AUDIT
            FROM JSRES_DOCTOR_DEPT_DETAIL T
            LEFT JOIN JSRES_DOCTOR_DEPT_TEMP S
            ON T.RECRUIT_FLOW=S.RECRUIT_FLOW
            WHERE COMPLETE_BI!='-'
            AND  INSTR(S.HAVE_SHORT,T.IS_SHORT)>0
            AND T.IS_ADD='Y'
            and T.RECRUIT_FLOW = #{recruitFlow} and t.apply_year=#{applyYear}
            GROUP BY T.RECRUIT_FLOW) A)
       where  RECRUIT_FLOW =#{recruitFlow}
    </update>
    <update id="updateRecruitAvgPerTempByRecruitFlow">
        update JSRES_GRADUATION_APPLY dr set
             AVG_COMPLETE_BI_PER=( select nvl(AVG_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow}),
        AVG_OUT_COMPLETE_BI_PER=( select nvl(AVG_OUT_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow}),
        AVG_IN_COMPLETE_BI_PER=( select nvl(AVG_IN_COMPLETE_BI_PER,0) from JSRES_DOCTOR_DEPT_AVG_TEMP t where t.recruit_flow= #{recruitFlow})
        WHERE DR.RECORD_STATUS='Y' AND DR.APPLY_FLOW=#{applyFlow}
    </update>
    <select id="queryProcess" resultMap="com.pinde.core.common.sci.dao.ResDoctorSchProcessMapper.BaseResultMap">

    select * from res_doctor_sch_process where user_flow in (
      select user_flow from sys_user where user_code=#{userCode} and record_status='Y'
    )
    and record_status='Y' order by sch_start_date
    </select>
    <select id="queryDelProcess" resultMap="com.pinde.core.common.sci.dao.ResDoctorSchProcessMapper.BaseResultMap">
        select * from res_doctor_sch_process p where user_flow in (
          select user_flow from sys_user where user_code=#{userCode} and record_status='Y'
        )
        and ((record_status='N'and modify_user_flow='TEMP-delProcess-delProcess')
         or exists
         (select 1 from res_sch_process_express e where p.process_flow=e.process_flow
                     and modify_user_flow='TEMP-delProcessType'
                     and record_status='N'
                     )
         )order by sch_start_date
    </select>
    <select id="examTeaRole" resultMap="com.pinde.core.common.sci.dao.SysUserMapper.BaseResultMap">
        select * from sys_user where is_exam_tea='Y'
    </select>
    <select id="getOscaNotSubmitInfo"  resultMap="com.pinde.core.common.sci.dao.OscaTeaScanDocMapper.BaseResultMap">
        SELECT *
        FROM OSCA_TEA_SCAN_DOC OSRD
        WHERE
        OSRD.RECORD_STATUS='Y'
        and status_id in ('StayAssessment','NotSubmit')
        and exists (
            select 1 from osca_skill_doc_score osds
            where osds.doctor_flow=osrd.doctor_flow
            and osds.partner_flow=osrd.partner_flow
            and status_id='Save'
            and osds.record_status='Y'
        )
        and exists (
            select 1 from osca_doctor_assessment oda
            where oda.record_status='Y'
            and oda.clinical_flow=osrd.clinical_flow
            and oda.doctor_flow=osrd.doctor_flow
            and audit_status_id='Passed'
            and to_char(to_date(oda.EXAM_END_TIME, 'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd')
            <![CDATA[<=]]> to_char(sysdate,'yyyy-mm-dd')
        )
        and create_time >='20180000000000'
        and partner_flow !='09111756695e44edb1406b01a4af4238'
        and CLINICAL_FLOW in (
          select CLINICAL_FLOW from osca_skills_assessment where record_status='Y'
          and org_flow=#{orgFlow}
        )
        order by doctor_flow,partner_flow
    </select>
    <resultMap id="queryApplyListMap" type="hashmap">
        <result column="DOCTOR_FLOW" jdbcType="VARCHAR" property="doctorFlow" />
        <result column="DOCTOR_NAME" jdbcType="VARCHAR" property="doctorName" />
        <result column="RECRUIT_FLOW" jdbcType="VARCHAR" property="recruitFlow" />
        <result column="APPLY_FLOW" jdbcType="VARCHAR" property="applyFlow" />
    </resultMap>
    <select id="queryApplyList"  resultMap="queryApplyListMap">
        select dr.apply_flow,rdr.recruit_flow,rd.doctor_flow,rd.doctor_name from
         JSRES_GRADUATION_APPLY dr
         left join res_doctor_recruit rdr
         on dr.recruit_flow=rdr.recruit_flow
         left join res_doctor rd
         on rdr.doctor_flow=rd.doctor_flow
        WHERE DR.RECORD_STATUS='Y' and apply_year=#{applyYear}
    </select>

    <select id="getTeaDocScores" resultMap="com.pinde.core.common.sci.dao.OscaSkillDocScoreMapper.BaseResultMap">
        SELECT * FROM OSCA_SKILL_DOC_SCORE A
        WHERE A.RECORD_STATUS='Y'
        AND A.DOCTOR_FLOW =#{doctorFlow}
        AND A.PARTNER_FLOW=#{userFlow}
        AND A.STATUS_ID='Save'
        AND EXISTS (
            SELECT 1 FROM OSCA_TEA_SCAN_DOC B
            WHERE B.RECORD_STATUS='Y'
            AND A.DOCTOR_FLOW = B.DOCTOR_FLOW
            AND A.CLINICAL_FLOW=B.CLINICAL_FLOW
            AND A.PARTNER_FLOW=B.PARTNER_FLOW
        )
    </select>

    <select id="getOscaSkillRoomDocByDoc" parameterType="string"
            resultMap="com.pinde.core.common.sci.dao.OscaSkillRoomDocMapper.BaseResultMap">
        SELECT *
        FROM OSCA_SKILL_ROOM_DOC OSRD
        WHERE OSRD.RECORD_STATUS = 'Y'
        AND OSRD.DOCTOR_FLOW = #{doctorFlow}
        AND OSRD.CLINICAL_FLOW = #{clinicalFlow}
        AND OSRD.STATION_FLOW = #{stationFlow}
        order by create_time desc
    </select>

	<select id="getDocStationAllScore" parameterType="map" resultType="java.util.HashMap">
        SELECT B.DOCTOR_FLOW,
               B.CLINICAL_FLOW,
               B.STATION_FLOW,
               TO_CHAR(CASE
                         WHEN COUNT(B.PARTNER_FLOW) = 0 THEN
                          0
                         ELSE
                          ROUND(SUM(STATION_ALL_SCORE) / COUNT(B.PARTNER_FLOW), 2)
                       END) AS STATION_AVG_SCORE
          FROM (SELECT A.DOCTOR_FLOW,
                       A.CLINICAL_FLOW,
                       A.STATION_FLOW,
                       A.PARTNER_FLOW,
                       TO_CHAR(CASE
                                 WHEN COUNT(A.FROM_FLOW) = 0 THEN
                                  0
                                 ELSE
                                  round(SUM(A.FROM_EXAM_SCORE) / COUNT(A.FROM_FLOW), 2)
                               END) AS STATION_ALL_SCORE
                   FROM (SELECT T.DOCTOR_FLOW,
                                T.CLINICAL_FLOW,
                                T.STATION_FLOW,
                                T.PARTNER_FLOW,
                                T.EXAM_SCORE,
                                T.IS_HAVE_FROM,
                                CASE
                                  WHEN T.FROM_FLOW IS NULL THEN
                                   'NOFROMFLOW'
                                  ELSE
                                   T.FROM_FLOW
                                END FROM_FLOW,
                                CASE
                                  WHEN T.FROM_FLOW IS NULL THEN
                                   100
                                  ELSE
                                   to_number(T.FROM_SCORE)
                                END FROM_SCORE,
                                S.STATION_SCORE,
                                NVL((T.EXAM_SCORE / CASE
                                      WHEN T.FROM_FLOW IS NULL THEN
                                       100
                                      ELSE
                                       to_number(T.FROM_SCORE)
                                    END) * STATION_SCORE,
                                    0) FROM_EXAM_SCORE
                           FROM OSCA_SKILL_DOC_SCORE T
                           LEFT JOIN OSCA_SUBJECT_STATION S
                             ON T.STATION_FLOW = S.STATION_FLOW
                          WHERE T.DOCTOR_FLOW = #{doctorFlow}
							   AND T.CLINICAL_FLOW = #{clinicalFlow}
							   AND T.STATION_FLOW = #{stationFlow}
							   AND T.RECORD_STATUS = 'Y'
							   AND T.STATUS_ID = 'Submit') A
                  GROUP BY A.DOCTOR_FLOW,
                           A.CLINICAL_FLOW,
                           A.STATION_FLOW,
                           A.PARTNER_FLOW) B
          GROUP BY B.DOCTOR_FLOW, B.CLINICAL_FLOW, B.STATION_FLOW
	</select>
    <select id="getTeaDocStation" parameterType="map"
            resultMap="com.pinde.core.common.sci.dao.OscaSubjectStationMapper.BaseResultMap">
        SELECT distinct S.*
        FROM OSCA_SKILL_ROOM_TEA T
        join OSCA_SUBJECT_STATION S ON T.STATION_FLOW=S.STATION_FLOW
        WHERE CLINICAL_FLOW = #{clinicalFlow}
        AND T.RECORD_STATUS = 'Y'
        AND T.PARTNER_FLOW = #{userFlow}
        ORDER BY S.ORDINAL ASC

    </select>
    <select id="getTeaSubDocStation" parameterType="map"
            resultMap="com.pinde.core.common.sci.dao.OscaSubjectStationMapper.BaseResultMap">
        SELECT  S.*
        FROM OSCA_SUBJECT_STATION S
        WHERE S.STATION_FLOW IN (
        select T.STATION_FLOW
        from OSCA_SKILL_DOC_SCORE t
        where record_status = 'Y'
        and partner_flow = #{userFlow}
        and doctor_flow = #{doctorFlow}
        AND CLINICAL_FLOW=#{clinicalFlow}
        )
        ORDER BY S.ORDINAL ASC
    </select>
    <select id="getDocScoreByParam" parameterType="string"
            resultMap="com.pinde.core.common.sci.dao.OscaSkillDocScoreMapper.ResultMapWithBLOBs">
        SELECT *
        FROM OSCA_SKILL_DOC_SCORE OSRD
        WHERE OSRD.RECORD_STATUS = 'Y'
        AND OSRD.DOCTOR_FLOW = #{doctorFlow}
        AND OSRD.CLINICAL_FLOW = #{clinicalFlow}
        AND OSRD.STATION_FLOW = #{stationFlow}
        AND OSRD.PARTNER_FLOW = #{userFlow}
        <if test="roomRecordFlow!=null and roomRecordFlow!=''">
            AND OSRD.ROOM_RECORD_FLOW= #{roomRecordFlow}
        </if>
        order by create_time desc
    </select>
    <select id="getOscaTeaScanDoc" parameterType="map"
            resultMap="com.pinde.core.common.sci.dao.OscaTeaScanDocMapper.BaseResultMap">
        SELECT *
        FROM OSCA_TEA_SCAN_DOC OSRD
        WHERE
        OSRD.DOCTOR_FLOW = #{doctorFlow}
        AND OSRD.CLINICAL_FLOW = #{clinicalFlow}
        AND OSRD.PARTNER_FLOW = #{userFlow}
        order by create_time desc
    </select>
    <select id="updateAfterEvalutaion"
            resultMap="com.pinde.core.common.sci.dao.ResSchProcessExpressMapper.BaseResultMap">
        SELECT rec_flow,Process_flow
        FROM RES_SCH_PROCESS_EXPRESS
        where SCH_ROTATION_DEPT_FLOW is null and rec_Type_id ='AfterEvaluation'
        and record_status='Y'
    </select>
    <update id="updateResultAfterPicNotHaveRec"  >
         update sch_arrange_result sar set have_after_pic='N'
                   where sar.record_status='Y'
                   and have_after_pic='Y'
                   and not exists (
                 select 1
                from res_sch_process_express r
                left join sch_rotation_dept d
                on r.sch_rotation_dept_flow=d.record_flow
                where  r.record_status='Y'
                and d.record_status='Y'
                and r.rec_type_id='AfterSummary'
                and r.sch_rotation_dept_flow is not null
                and sar.doctor_flow=r.oper_user_flow
               AND sar.standard_group_flow = d.group_flow
               AND sar.standard_dept_id = d.standard_dept_id
              )
    </update>
    <insert id="updateMonthStatistics">
 insert into SYS_MONTHLY_STATISTICS
    (  STATISTIC_FLOW ,
       ORG_FLOW  ,
       ALL_NUM   ,
       USER_NUM   ,
       AUDIT_NUM  ,
       AVG_NUM  ,
       DATE_MONTH  ,
       DOCTOR_TYPE_ID  )

    SELECT sys_guid(),
            org.org_flow,
       nvl(b.all_num, 0) all_num,
       nvl(b.usernum, 0) user_num,
       nvl(b.auditnum, 0) audit_num,
       ROUND(nvl(b.avg_num, 0), 2) avg_num,
       #{month},
       #{type} doctor_type_id
  from sys_org org
  left join (select so.org_level_id,
                    so.org_level_name,
                    so.org_flow,
                    so.org_code,
                    so.org_name,
                    count(1) all_num,
                    count(distinct rd.doctor_flow) userNum,
                    count(audit_status_id) auditNum,
                    nvl((case
                          when count(1) = 0 then
                           0
                          when count(distinct rd.doctor_flow) = 0 then
                           0
                          when count(distinct rd.doctor_flow) > 0 then
                           count(1) / count(distinct rd.doctor_flow)
                        end),
                        0) avg_num
               from sys_org so
               left join res_doctor rd on so.org_flow = rd.org_flow

               left join res_rec rr on rr.oper_user_flow = rd.doctor_flow
                                   and rr.record_status = 'Y'
                                   and substr(rr.create_time, 0, 4)||'-'||substr(rr.create_time, 5, 2) =#{month}
              where so.record_status = 'Y'
                and rd.record_status = 'Y'
                and (rd.doctor_type_id is null or
                    rd.doctor_type_id in
                    (select dict_id
                        from sys_dict
                       where dict_type_id = 'DoctorType'
                         and record_status = 'Y'))
                         <if test="type!=null and type!='' and type=='All'.toString()">

                         </if>
                         <if test="type!=null and type!='' and type=='NotGraduate'.toString()">
                             and rd.doctor_type_id != 'Graduate'
                             AND (rd.DOCTOR_STATUS_ID NOT IN
                             ('UnPassed', 'Passed', 'UnSubmit') OR
                             rd.DOCTOR_STATUS_ID IS NULL)
                         </if>
                         <if test="type!=null and type!='' and type=='Graduate'.toString()">
                             and rd.doctor_type_id = 'Graduate'
                         </if>
                AND (rd.DOCTOR_STATUS_ID NOT IN
                ('UnPassed', 'Passed', 'UnSubmit') OR
                rd.DOCTOR_STATUS_ID IS NULL)
                AND rr.REC_TYPE_ID IN
                    (SELECT replace(replace(replace(cfg_code,
                                                    'res_registry_type_',
                                                    ''),
                                            'theoretical_registry_type_',
                                            ''),
                                    'practic_registry_type_',
                                    '')
                       FROM sys_cfg
                      where record_status = 'Y'
                        and (cfg_code like 'res_registry_type_%' or
                            cfg_code like 'theoretical_registry_type_%' or
                            cfg_code like 'practic_registry_type_%')
                        and cfg_value = 'Y')
              group by so.org_level_id,
                       so.org_level_name,
                       so.org_flow,
                       so.org_code,
                       so.org_name) b on org.org_flow = b.org_flow
                      where org.record_status = 'Y'
    </insert>
    <insert id="updateMonthAppStatistics">
insert into SYS_MONTHLY_APP_STATISTICS
    (  APP_FLOW ,
       ORG_FLOW  ,
       ALL_NUM   ,
       USER_NUM   ,
       PER_NUM  ,
       DATE_MONTH  ,
       DOCTOR_TYPE_ID  )
    SELECT sys_guid(),
           org.org_flow,
         nvl(a.allNum, 0) allNum,
         nvl(b.num, 0) num,
         ROUND(nvl((case
               when b.num = 0 then
                0
               when a.allNum = null then
                0
               when a.allNum = '' then
                0
               when a.allNum > 0 then
                b.num / a.allNum
             end),
             0), 2) * 100 per,
           #{month},
           #{type}
        from sys_org org
        left join (select org_flow, NVL(count(distinct doctor_flow), 0) allNUM
                     from res_doctor rd
                    where RECORD_STATUS = 'Y'
                      and (rd.doctor_type_id is null or
                          rd.doctor_type_id in
                          (select dict_id
                              from sys_dict
                             where dict_type_id = 'DoctorType'
                               and record_status = 'Y'))
                            <if test="type!=null and type!='' and type=='All'.toString()">

                            </if>
                            <if test="type!=null and type!='' and type=='NotGraduate'.toString()">
                                and rd.doctor_type_id != 'Graduate'
                                AND (rd.DOCTOR_STATUS_ID NOT IN
                                ('UnPassed', 'Passed', 'UnSubmit') OR
                                rd.DOCTOR_STATUS_ID IS NULL)
                            </if>
                            <if test="type!=null and type!='' and type=='Graduate'.toString()">
                                and rd.doctor_type_id = 'Graduate'
                            </if>
                    group by org_flow) a on org.org_flow = a.org_flow
        left join (select rd.org_flow,
                          NVL(count(distinct rec.OPER_USER_FLOW), 0) NUM
                     from RES_REC rec, res_doctor rd
                    where rec.RECORD_STATUS = 'Y'
                      and rd.record_status = 'Y'
                      and rec.oper_user_flow = rd.doctor_flow
                      and substr(rec.create_time, 0, 4)||'-'||substr(rec.create_time, 5, 2)  =#{month}
                    group by rd.org_flow) b on org.org_flow = b.org_flow
       where org.record_status = 'Y'
       order by org_level_id, org_code
    </insert>
    <delete id="deleteMonthStatistics"  >
         delete from  sys_monthly_statistics where date_month=#{month}

    </delete>
    <delete id="deleteMonthAppStatistics"  >
         delete from  sys_monthly_app_statistics where date_month=#{month}
    </delete>
    <insert id="addTempNo"  >
         insert into temp_id (id_no)
         values(#{idNo})
    </insert>
    <update id="updateStudentCourse"  >
         update edu_student_course set study_status_Id = 'Finish',study_status_name='已完成'
         where study_status_Id ! = 'Finish' and record_status='Y'
    </update>
    <update id="updateStudentCourseSchedule"  >
         update Edu_Course_Schedule set study_status_Id = 'Finish',study_status_name='已完成',CHAPTER_FINISH_FLAG='Y'
         where study_status_Id ! = 'Finish' and record_status='Y'
    </update>
</mapper>
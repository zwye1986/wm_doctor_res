<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinde.sci.dao.base.ResLectureScanRegistMapper" >
  <resultMap id="BaseResultMap" type="com.pinde.sci.model.mo.ResLectureScanRegist" >
    <id column="RECORD_FLOW" property="recordFlow" jdbcType="VARCHAR" />
    <result column="LECTURE_FLOW" property="lectureFlow" jdbcType="VARCHAR" />
    <result column="OPER_USER_FLOW" property="operUserFlow" jdbcType="VARCHAR" />
    <result column="OPER_USER_NAME" property="operUserName" jdbcType="VARCHAR" />
    <result column="TRAINING_SPE_ID" property="trainingSpeId" jdbcType="VARCHAR" />
    <result column="TRAINING_SPE_NAME" property="trainingSpeName" jdbcType="VARCHAR" />
    <result column="SESSION_NUMBER" property="sessionNumber" jdbcType="VARCHAR" />
    <result column="IS_SCAN" property="isScan" jdbcType="VARCHAR" />
    <result column="IS_REGIST" property="isRegist" jdbcType="VARCHAR" />
    <result column="RECORD_STATUS" property="recordStatus" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="VARCHAR" />
    <result column="CREATE_USER_FLOW" property="createUserFlow" jdbcType="VARCHAR" />
    <result column="MODIFY_TIME" property="modifyTime" jdbcType="VARCHAR" />
    <result column="MODIFY_USER_FLOW" property="modifyUserFlow" jdbcType="VARCHAR" />
    <result column="SCAN_TIME" property="scanTime" jdbcType="VARCHAR" />
    <result column="IS_SCAN2" property="isScan2" jdbcType="VARCHAR" />
    <result column="SCAN2_TIME" property="scan2Time" jdbcType="VARCHAR" />
    <result column="TRAINING_TYPE_ID" property="trainingTypeId" jdbcType="VARCHAR" />
    <result column="TRAINING_TYPE_NAME" property="trainingTypeName" jdbcType="VARCHAR" />
    <result column="EVAL_SCORE" property="evalScore" jdbcType="DECIMAL" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.pinde.sci.model.mo.ResLectureScanRegist" extends="BaseResultMap" >
    <result column="PROOF_URLS" property="proofUrls" jdbcType="CLOB" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    RECORD_FLOW, LECTURE_FLOW, OPER_USER_FLOW, OPER_USER_NAME, TRAINING_SPE_ID, TRAINING_SPE_NAME, 
    SESSION_NUMBER, IS_SCAN, IS_REGIST, RECORD_STATUS, CREATE_TIME, CREATE_USER_FLOW, 
    MODIFY_TIME, MODIFY_USER_FLOW, SCAN_TIME, IS_SCAN2, SCAN2_TIME, TRAINING_TYPE_ID, 
    TRAINING_TYPE_NAME, EVAL_SCORE
  </sql>
  <sql id="Blob_Column_List" >
    PROOF_URLS
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.pinde.sci.model.mo.ResLectureScanRegistExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
      from RES_LECTURE_SCAN_REGIST
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pinde.sci.model.mo.ResLectureScanRegistExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
      from RES_LECTURE_SCAN_REGIST
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
      from RES_LECTURE_SCAN_REGIST
    where RECORD_FLOW = #{recordFlow,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
      delete from RES_LECTURE_SCAN_REGIST
    where RECORD_FLOW = #{recordFlow,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.pinde.sci.model.mo.ResLectureScanRegistExample" >
      delete from RES_LECTURE_SCAN_REGIST
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pinde.sci.model.mo.ResLectureScanRegist" >
      insert into RES_LECTURE_SCAN_REGIST (RECORD_FLOW, LECTURE_FLOW, OPER_USER_FLOW,
      OPER_USER_NAME, TRAINING_SPE_ID, TRAINING_SPE_NAME, 
      SESSION_NUMBER, IS_SCAN, IS_REGIST, 
      RECORD_STATUS, CREATE_TIME, CREATE_USER_FLOW, 
      MODIFY_TIME, MODIFY_USER_FLOW, SCAN_TIME, 
      IS_SCAN2, SCAN2_TIME, TRAINING_TYPE_ID, 
      TRAINING_TYPE_NAME, EVAL_SCORE, PROOF_URLS
      )
    values (#{recordFlow,jdbcType=VARCHAR}, #{lectureFlow,jdbcType=VARCHAR}, #{operUserFlow,jdbcType=VARCHAR}, 
      #{operUserName,jdbcType=VARCHAR}, #{trainingSpeId,jdbcType=VARCHAR}, #{trainingSpeName,jdbcType=VARCHAR}, 
      #{sessionNumber,jdbcType=VARCHAR}, #{isScan,jdbcType=VARCHAR}, #{isRegist,jdbcType=VARCHAR}, 
      #{recordStatus,jdbcType=VARCHAR}, #{createTime,jdbcType=VARCHAR}, #{createUserFlow,jdbcType=VARCHAR}, 
      #{modifyTime,jdbcType=VARCHAR}, #{modifyUserFlow,jdbcType=VARCHAR}, #{scanTime,jdbcType=VARCHAR}, 
      #{isScan2,jdbcType=VARCHAR}, #{scan2Time,jdbcType=VARCHAR}, #{trainingTypeId,jdbcType=VARCHAR}, 
      #{trainingTypeName,jdbcType=VARCHAR}, #{evalScore,jdbcType=DECIMAL}, #{proofUrls,jdbcType=CLOB}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pinde.sci.model.mo.ResLectureScanRegist" >
      insert into RES_LECTURE_SCAN_REGIST
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="recordFlow != null" >
        RECORD_FLOW,
      </if>
      <if test="lectureFlow != null" >
        LECTURE_FLOW,
      </if>
      <if test="operUserFlow != null" >
        OPER_USER_FLOW,
      </if>
      <if test="operUserName != null" >
        OPER_USER_NAME,
      </if>
      <if test="trainingSpeId != null" >
        TRAINING_SPE_ID,
      </if>
      <if test="trainingSpeName != null" >
        TRAINING_SPE_NAME,
      </if>
      <if test="sessionNumber != null" >
        SESSION_NUMBER,
      </if>
      <if test="isScan != null" >
        IS_SCAN,
      </if>
      <if test="isRegist != null" >
        IS_REGIST,
      </if>
      <if test="recordStatus != null" >
        RECORD_STATUS,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="createUserFlow != null" >
        CREATE_USER_FLOW,
      </if>
      <if test="modifyTime != null" >
        MODIFY_TIME,
      </if>
      <if test="modifyUserFlow != null" >
        MODIFY_USER_FLOW,
      </if>
      <if test="scanTime != null" >
        SCAN_TIME,
      </if>
      <if test="isScan2 != null" >
        IS_SCAN2,
      </if>
      <if test="scan2Time != null" >
        SCAN2_TIME,
      </if>
      <if test="trainingTypeId != null" >
        TRAINING_TYPE_ID,
      </if>
      <if test="trainingTypeName != null" >
        TRAINING_TYPE_NAME,
      </if>
      <if test="evalScore != null" >
        EVAL_SCORE,
      </if>
      <if test="proofUrls != null" >
        PROOF_URLS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="recordFlow != null" >
        #{recordFlow,jdbcType=VARCHAR},
      </if>
      <if test="lectureFlow != null" >
        #{lectureFlow,jdbcType=VARCHAR},
      </if>
      <if test="operUserFlow != null" >
        #{operUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="operUserName != null" >
        #{operUserName,jdbcType=VARCHAR},
      </if>
      <if test="trainingSpeId != null" >
        #{trainingSpeId,jdbcType=VARCHAR},
      </if>
      <if test="trainingSpeName != null" >
        #{trainingSpeName,jdbcType=VARCHAR},
      </if>
      <if test="sessionNumber != null" >
        #{sessionNumber,jdbcType=VARCHAR},
      </if>
      <if test="isScan != null" >
        #{isScan,jdbcType=VARCHAR},
      </if>
      <if test="isRegist != null" >
        #{isRegist,jdbcType=VARCHAR},
      </if>
      <if test="recordStatus != null" >
        #{recordStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="createUserFlow != null" >
        #{createUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=VARCHAR},
      </if>
      <if test="modifyUserFlow != null" >
        #{modifyUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="scanTime != null" >
        #{scanTime,jdbcType=VARCHAR},
      </if>
      <if test="isScan2 != null" >
        #{isScan2,jdbcType=VARCHAR},
      </if>
      <if test="scan2Time != null" >
        #{scan2Time,jdbcType=VARCHAR},
      </if>
      <if test="trainingTypeId != null" >
        #{trainingTypeId,jdbcType=VARCHAR},
      </if>
      <if test="trainingTypeName != null" >
        #{trainingTypeName,jdbcType=VARCHAR},
      </if>
      <if test="evalScore != null" >
        #{evalScore,jdbcType=DECIMAL},
      </if>
      <if test="proofUrls != null" >
        #{proofUrls,jdbcType=CLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pinde.sci.model.mo.ResLectureScanRegistExample" resultType="java.lang.Integer" >
      select count(*) from RES_LECTURE_SCAN_REGIST
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
      update RES_LECTURE_SCAN_REGIST
    <set >
      <if test="record.recordFlow != null" >
        RECORD_FLOW = #{record.recordFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.lectureFlow != null" >
        LECTURE_FLOW = #{record.lectureFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.operUserFlow != null" >
        OPER_USER_FLOW = #{record.operUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.operUserName != null" >
        OPER_USER_NAME = #{record.operUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.trainingSpeId != null" >
        TRAINING_SPE_ID = #{record.trainingSpeId,jdbcType=VARCHAR},
      </if>
      <if test="record.trainingSpeName != null" >
        TRAINING_SPE_NAME = #{record.trainingSpeName,jdbcType=VARCHAR},
      </if>
      <if test="record.sessionNumber != null" >
        SESSION_NUMBER = #{record.sessionNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.isScan != null" >
        IS_SCAN = #{record.isScan,jdbcType=VARCHAR},
      </if>
      <if test="record.isRegist != null" >
        IS_REGIST = #{record.isRegist,jdbcType=VARCHAR},
      </if>
      <if test="record.recordStatus != null" >
        RECORD_STATUS = #{record.recordStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserFlow != null" >
        CREATE_USER_FLOW = #{record.createUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.modifyTime != null" >
        MODIFY_TIME = #{record.modifyTime,jdbcType=VARCHAR},
      </if>
      <if test="record.modifyUserFlow != null" >
        MODIFY_USER_FLOW = #{record.modifyUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.scanTime != null" >
        SCAN_TIME = #{record.scanTime,jdbcType=VARCHAR},
      </if>
      <if test="record.isScan2 != null" >
        IS_SCAN2 = #{record.isScan2,jdbcType=VARCHAR},
      </if>
      <if test="record.scan2Time != null" >
        SCAN2_TIME = #{record.scan2Time,jdbcType=VARCHAR},
      </if>
      <if test="record.trainingTypeId != null" >
        TRAINING_TYPE_ID = #{record.trainingTypeId,jdbcType=VARCHAR},
      </if>
      <if test="record.trainingTypeName != null" >
        TRAINING_TYPE_NAME = #{record.trainingTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.evalScore != null" >
        EVAL_SCORE = #{record.evalScore,jdbcType=DECIMAL},
      </if>
      <if test="record.proofUrls != null" >
        PROOF_URLS = #{record.proofUrls,jdbcType=CLOB},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
      update RES_LECTURE_SCAN_REGIST
    set RECORD_FLOW = #{record.recordFlow,jdbcType=VARCHAR},
      LECTURE_FLOW = #{record.lectureFlow,jdbcType=VARCHAR},
      OPER_USER_FLOW = #{record.operUserFlow,jdbcType=VARCHAR},
      OPER_USER_NAME = #{record.operUserName,jdbcType=VARCHAR},
      TRAINING_SPE_ID = #{record.trainingSpeId,jdbcType=VARCHAR},
      TRAINING_SPE_NAME = #{record.trainingSpeName,jdbcType=VARCHAR},
      SESSION_NUMBER = #{record.sessionNumber,jdbcType=VARCHAR},
      IS_SCAN = #{record.isScan,jdbcType=VARCHAR},
      IS_REGIST = #{record.isRegist,jdbcType=VARCHAR},
      RECORD_STATUS = #{record.recordStatus,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      CREATE_USER_FLOW = #{record.createUserFlow,jdbcType=VARCHAR},
      MODIFY_TIME = #{record.modifyTime,jdbcType=VARCHAR},
      MODIFY_USER_FLOW = #{record.modifyUserFlow,jdbcType=VARCHAR},
      SCAN_TIME = #{record.scanTime,jdbcType=VARCHAR},
      IS_SCAN2 = #{record.isScan2,jdbcType=VARCHAR},
      SCAN2_TIME = #{record.scan2Time,jdbcType=VARCHAR},
      TRAINING_TYPE_ID = #{record.trainingTypeId,jdbcType=VARCHAR},
      TRAINING_TYPE_NAME = #{record.trainingTypeName,jdbcType=VARCHAR},
      EVAL_SCORE = #{record.evalScore,jdbcType=DECIMAL},
      PROOF_URLS = #{record.proofUrls,jdbcType=CLOB}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
      update RES_LECTURE_SCAN_REGIST
    set RECORD_FLOW = #{record.recordFlow,jdbcType=VARCHAR},
      LECTURE_FLOW = #{record.lectureFlow,jdbcType=VARCHAR},
      OPER_USER_FLOW = #{record.operUserFlow,jdbcType=VARCHAR},
      OPER_USER_NAME = #{record.operUserName,jdbcType=VARCHAR},
      TRAINING_SPE_ID = #{record.trainingSpeId,jdbcType=VARCHAR},
      TRAINING_SPE_NAME = #{record.trainingSpeName,jdbcType=VARCHAR},
      SESSION_NUMBER = #{record.sessionNumber,jdbcType=VARCHAR},
      IS_SCAN = #{record.isScan,jdbcType=VARCHAR},
      IS_REGIST = #{record.isRegist,jdbcType=VARCHAR},
      RECORD_STATUS = #{record.recordStatus,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=VARCHAR},
      CREATE_USER_FLOW = #{record.createUserFlow,jdbcType=VARCHAR},
      MODIFY_TIME = #{record.modifyTime,jdbcType=VARCHAR},
      MODIFY_USER_FLOW = #{record.modifyUserFlow,jdbcType=VARCHAR},
      SCAN_TIME = #{record.scanTime,jdbcType=VARCHAR},
      IS_SCAN2 = #{record.isScan2,jdbcType=VARCHAR},
      SCAN2_TIME = #{record.scan2Time,jdbcType=VARCHAR},
      TRAINING_TYPE_ID = #{record.trainingTypeId,jdbcType=VARCHAR},
      TRAINING_TYPE_NAME = #{record.trainingTypeName,jdbcType=VARCHAR},
      EVAL_SCORE = #{record.evalScore,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pinde.sci.model.mo.ResLectureScanRegist" >
      update RES_LECTURE_SCAN_REGIST
    <set >
      <if test="lectureFlow != null" >
        LECTURE_FLOW = #{lectureFlow,jdbcType=VARCHAR},
      </if>
      <if test="operUserFlow != null" >
        OPER_USER_FLOW = #{operUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="operUserName != null" >
        OPER_USER_NAME = #{operUserName,jdbcType=VARCHAR},
      </if>
      <if test="trainingSpeId != null" >
        TRAINING_SPE_ID = #{trainingSpeId,jdbcType=VARCHAR},
      </if>
      <if test="trainingSpeName != null" >
        TRAINING_SPE_NAME = #{trainingSpeName,jdbcType=VARCHAR},
      </if>
      <if test="sessionNumber != null" >
        SESSION_NUMBER = #{sessionNumber,jdbcType=VARCHAR},
      </if>
      <if test="isScan != null" >
        IS_SCAN = #{isScan,jdbcType=VARCHAR},
      </if>
      <if test="isRegist != null" >
        IS_REGIST = #{isRegist,jdbcType=VARCHAR},
      </if>
      <if test="recordStatus != null" >
        RECORD_STATUS = #{recordStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="createUserFlow != null" >
        CREATE_USER_FLOW = #{createUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null" >
        MODIFY_TIME = #{modifyTime,jdbcType=VARCHAR},
      </if>
      <if test="modifyUserFlow != null" >
        MODIFY_USER_FLOW = #{modifyUserFlow,jdbcType=VARCHAR},
      </if>
      <if test="scanTime != null" >
        SCAN_TIME = #{scanTime,jdbcType=VARCHAR},
      </if>
      <if test="isScan2 != null" >
        IS_SCAN2 = #{isScan2,jdbcType=VARCHAR},
      </if>
      <if test="scan2Time != null" >
        SCAN2_TIME = #{scan2Time,jdbcType=VARCHAR},
      </if>
      <if test="trainingTypeId != null" >
        TRAINING_TYPE_ID = #{trainingTypeId,jdbcType=VARCHAR},
      </if>
      <if test="trainingTypeName != null" >
        TRAINING_TYPE_NAME = #{trainingTypeName,jdbcType=VARCHAR},
      </if>
      <if test="evalScore != null" >
        EVAL_SCORE = #{evalScore,jdbcType=DECIMAL},
      </if>
      <if test="proofUrls != null" >
        PROOF_URLS = #{proofUrls,jdbcType=CLOB},
      </if>
    </set>
    where RECORD_FLOW = #{recordFlow,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.pinde.sci.model.mo.ResLectureScanRegist" >
      update RES_LECTURE_SCAN_REGIST
    set LECTURE_FLOW = #{lectureFlow,jdbcType=VARCHAR},
      OPER_USER_FLOW = #{operUserFlow,jdbcType=VARCHAR},
      OPER_USER_NAME = #{operUserName,jdbcType=VARCHAR},
      TRAINING_SPE_ID = #{trainingSpeId,jdbcType=VARCHAR},
      TRAINING_SPE_NAME = #{trainingSpeName,jdbcType=VARCHAR},
      SESSION_NUMBER = #{sessionNumber,jdbcType=VARCHAR},
      IS_SCAN = #{isScan,jdbcType=VARCHAR},
      IS_REGIST = #{isRegist,jdbcType=VARCHAR},
      RECORD_STATUS = #{recordStatus,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      CREATE_USER_FLOW = #{createUserFlow,jdbcType=VARCHAR},
      MODIFY_TIME = #{modifyTime,jdbcType=VARCHAR},
      MODIFY_USER_FLOW = #{modifyUserFlow,jdbcType=VARCHAR},
      SCAN_TIME = #{scanTime,jdbcType=VARCHAR},
      IS_SCAN2 = #{isScan2,jdbcType=VARCHAR},
      SCAN2_TIME = #{scan2Time,jdbcType=VARCHAR},
      TRAINING_TYPE_ID = #{trainingTypeId,jdbcType=VARCHAR},
      TRAINING_TYPE_NAME = #{trainingTypeName,jdbcType=VARCHAR},
      EVAL_SCORE = #{evalScore,jdbcType=DECIMAL},
      PROOF_URLS = #{proofUrls,jdbcType=CLOB}
    where RECORD_FLOW = #{recordFlow,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pinde.sci.model.mo.ResLectureScanRegist" >
      update RES_LECTURE_SCAN_REGIST
    set LECTURE_FLOW = #{lectureFlow,jdbcType=VARCHAR},
      OPER_USER_FLOW = #{operUserFlow,jdbcType=VARCHAR},
      OPER_USER_NAME = #{operUserName,jdbcType=VARCHAR},
      TRAINING_SPE_ID = #{trainingSpeId,jdbcType=VARCHAR},
      TRAINING_SPE_NAME = #{trainingSpeName,jdbcType=VARCHAR},
      SESSION_NUMBER = #{sessionNumber,jdbcType=VARCHAR},
      IS_SCAN = #{isScan,jdbcType=VARCHAR},
      IS_REGIST = #{isRegist,jdbcType=VARCHAR},
      RECORD_STATUS = #{recordStatus,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=VARCHAR},
      CREATE_USER_FLOW = #{createUserFlow,jdbcType=VARCHAR},
      MODIFY_TIME = #{modifyTime,jdbcType=VARCHAR},
      MODIFY_USER_FLOW = #{modifyUserFlow,jdbcType=VARCHAR},
      SCAN_TIME = #{scanTime,jdbcType=VARCHAR},
      IS_SCAN2 = #{isScan2,jdbcType=VARCHAR},
      SCAN2_TIME = #{scan2Time,jdbcType=VARCHAR},
      TRAINING_TYPE_ID = #{trainingTypeId,jdbcType=VARCHAR},
      TRAINING_TYPE_NAME = #{trainingTypeName,jdbcType=VARCHAR},
      EVAL_SCORE = #{evalScore,jdbcType=DECIMAL}
    where RECORD_FLOW = #{recordFlow,jdbcType=VARCHAR}
  </update>
</mapper>
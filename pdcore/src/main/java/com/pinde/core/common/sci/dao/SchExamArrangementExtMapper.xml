<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinde.core.common.sci.dao.SchExamArrangementExtMapper">
    <select id="findDocExamCount" resultType="int">
        select count(1)
        from sch_exam_doctor_arrangement
        where record_status='Y'
        and exam_score is not NULL
        and doctor_flow = #{userFlow}
        and arrange_flow =#{arrangeFlow}
    </select>
    <select id="checkHaveExam" resultType="int">
        select count(1)
        from sch_exam_doctor_arrangement
        where record_status='Y'
        and exam_score is not NULL
        and arrange_flow =#{arrangeFlow}
    </select>
    <update id="deleteSchExamStandardDeptByDeptId">
        update sch_exam_standard_dept set record_status='N'
        where STANDARD_DEPT_ID=#{deptFlow}
    </update>
    <resultMap type="HashMap" id="configMap">
        <result column="STANDARD_DEPT_NAME" property="standardDeptNames" javaType="string"/>
    </resultMap>
    <select id="getGuDingConfig" resultMap="configMap">
        select arrange_flow,listagg(standard_dept_name,'|') within group (order by  standard_dept_id) as STANDARD_DEPT_NAME
        from
        (  select DISTINCT  arrange_flow,cfg.STANDARD_DEPT_ID,cfg.STANDARD_DEPT_NAME
            from SCH_EXAM_Standard_Dept t
            left join  sch_and_standard_dept_cfg cfg
            on t.standard_dept_id=cfg.sch_dept_flow
            where t.record_status='Y'
            and cfg.record_status='Y'
            and t.arrange_flow=#{ment.arrangeFlow}
        ) b
        group by arrange_flow
    </select>
    <select id="getSuiJiConfig" resultMap="configMap">
        SELECT
        LISTAGG(STANDARD_DEPT_NAME, '|') WITHIN GROUP(ORDER BY STANDARD_DEPT_ID) AS STANDARD_DEPT_NAME
        FROM (SELECT DISTINCT C.STANDARD_DEPT_ID, C.STANDARD_DEPT_NAME
        FROM SCH_AND_STANDARD_DEPT_CFG C
        WHERE C.RECORD_STATUS = 'Y'
        AND EXISTS (SELECT *
        FROM SCH_ARRANGE_RESULT R
        WHERE R.RECORD_STATUS = 'Y'
        AND C.SCH_DEPT_FLOW = R.SCH_DEPT_FLOW
        AND R.DOCTOR_FLOW = #{userFlow}
        AND R.ORG_FLOW = #{ment.orgFlow}
        and (
							(
							R.SCH_START_DATE <![CDATA[<=]]> #{ment.assessmentStartTime}
							and R.SCH_END_DATE >= #{ment.assessmentStartTime}
							)
							or
							(
							R.SCH_START_DATE <![CDATA[<=]]> #{ment.assessmentEndTime}
							and R.SCH_END_DATE >= #{ment.assessmentEndTime}
							)
							or
							(
							R.SCH_START_DATE <![CDATA[>=]]> #{ment.assessmentStartTime}
							and R.SCH_END_DATE <![CDATA[<=]]> #{ment.assessmentEndTime}
							)
							))) B
    </select>
    <resultMap type="HashMap" id="itemMap">
        <result column="COUNTNUM" property="COUNTNUM" javaType="string"/>
        <result column="ARRANGEFLOW" property="ARRANGEFLOW" javaType="string"/>
        <result column="MAXSCORE" property="MAXSCORE" javaType="string"/>
    </resultMap>
    <select id="searchExamLogByItems" parameterType="java.util.Map" resultMap="itemMap">
        select
        COUNT(1) COUNTNUM,
        ARRANGE_FLOW ARRANGEFLOW,
        MAX(EXAM_SCORE) MAXSCORE
        from sch_exam_doctor_arrangement
        where RECORD_STATUS = 'Y'
               AND EXAM_SCORE is not null
        <if test="arrangeFlow != null and arrangeFlow != ''">
            AND ARRANGE_FLOW = #{arrangeFlow}
        </if>
        <if test="doctorFlow != null and doctorFlow != ''">
            AND DOCTOR_FLOW = #{doctorFlow}
        </if>
        group by ARRANGE_FLOW , DOCTOR_FLOW
    </select>
</mapper>
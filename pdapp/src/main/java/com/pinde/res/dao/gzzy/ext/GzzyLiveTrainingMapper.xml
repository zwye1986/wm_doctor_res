<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pinde.res.dao.gzzy.ext.GzzyLiveTrainingMapper">

	<resultMap id="resultMap" type="java.util.Map">
		<result column="Opinion_User_Content" property="Opinion_User_Content" jdbcType="BLOB" javaType="string" />
		<result column="Opinion_Reply_Content" property="Opinion_Reply_Content" jdbcType="BLOB" javaType="string" />
	</resultMap>
  <select id="readByOpinionUserFlow" parameterType="java.util.Map" resultMap="resultMap">
	  SELECT * FROM (
	  SELECT ROW_NUMBER() OVER (order by T.Eva_Time)AS Row, T.*
	  from (
      SELECT Record_Flow,
	  		Opinion_User_Content Opinion_User_Content,
      		Eva_Time,
	  		Opinion_ReplyName,
      		case when Opinion_Reply_UserID is null then '未回复' else '已回复' end as IsReply,
      		Opinion_Reply_Content Opinion_Reply_Content,
      		Reply_Time
      		FROM
      		Res_Train_Opinion
      		where 1=1
      		<if test='userFlow!=null and userFlow!=""'>
      			and Opinion_UserID=#{userFlow}
			</if>
	  )as T
	  ) TT
	  WHERE TT.Row between #{start} and #{end}
	  ORDER BY Eva_Time
  </select>

	<select id="read" parameterType="java.lang.String" resultMap="resultMap">
		SELECT Record_Flow,
		 		Opinion_User_Content ,
				Eva_Time,Opinion_ReplyName,
				case when Opinion_Reply_UserID is null then '未回复' else '已回复' end as IsReply,
		 		Opinion_Reply_Content,
		 		Reply_Time
		 FROM Res_Train_Opinion
		 where Record_Flow=#{trainingOpinionFlow}
	</select>

	<delete id="delOpinion" parameterType="java.lang.String">
		delete FROM Res_Train_Opinion where Record_Flow=#{trainingOpinionFlow}
	</delete>

	<insert id="addOpinion" parameterType="java.util.Map">
		insert into Res_Train_Opinion(Record_Flow,Opinion_UserID,Opinion_UserName,Opinion_User_Content ,Eva_Time,
		Org_Flow,Org_Name,Record_Status,Create_Time,Create_UserID)
		values(NEWID(),#{Opinion_UserID},#{Opinion_UserName},#{Opinion_User_Content},
		#{Eva_Time},#{Org_Flow},#{Org_Name},
		'0',#{Create_Time},#{Create_UserID})
	</insert>

	<update id="editOpinion" parameterType="java.util.Map">
		update Res_Train_Opinion set
		  Opinion_UserID=#{Opinion_UserID},Opinion_UserName=#{Opinion_UserName},
		  Opinion_User_Content=#{Opinion_User_Content},Eva_Time=#{Eva_Time}
		 where Record_Flow=#{Record_Flow}
	</update>

	<resultMap id="resultMap2" type="java.util.Map">
		<result column="Res_Notice_Content" property="Res_Notice_Content" jdbcType="BLOB" javaType="string" />
	</resultMap>

	<select id="readNotice" parameterType="java.lang.String" resultMap="resultMap2">
		SELECT Record_Flow,Res_Notice_Title ,Res_Notice_Content
		FROM Res_Train_Notice
		where Record_Flow=#{recordFlow}
	</select>

	<select id="readNoticeByOrgFlow" parameterType="java.util.Map" resultMap="resultMap2">
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (order by T.Create_Time desc)AS Row, T.*
		from (
		SELECT Record_Flow,Res_Notice_Title ,Res_Notice_Content,Create_Time
		FROM Res_Train_Notice
		where 1=1
		<if test='orgFlow!=null and orgFlow!=""'>
			and Org_Flow=#{orgFlow}
		</if>
		<if test='noticeTitle!=null and noticeTitle!=""'>
			and Res_Notice_Title like '%${noticeTitle}%'
		</if>
		)as T
		) TT
		WHERE TT.Row between #{start} and #{end}
		ORDER BY Create_Time desc
	</select>

	<select id="getAttendanceDetailList" parameterType="java.util.Map" resultType="java.util.Map">
		select Attend_Time,Attend_Local,Self_Remarks
		from Res_Attendance
		where 1=1
		<if test='userFlow!=null and userFlow!=""'>
			and Attend_UserID = #{userFlow}
		</if>
		<if test='nowDay!=null and nowDay!=""'>
			and Attend_Date = #{nowDay}
		</if>
		and Attend_Time is not null and Attend_Time !=''
		union
		select Attend_Time,Attend_Local,Self_Remarks
		from Res_Attendance_Detail
		where 1=1
		<if test='userFlow!=null and userFlow!=""'>
			and Attend_UserID = #{userFlow}
		</if>
		<if test='nowDay!=null and nowDay!=""'>
			and Attend_Date = #{nowDay}
		</if>
		and Attend_Time is not null  and Attend_Time !=''
		ORDER by ATTEND_TIME DESC
	</select>

	<select id="getAttendance" parameterType="java.util.Map" resultType="java.util.Map">
		select Record_Flow,Attend_Time,Attend_Local,Self_Remarks
		from Res_Attendance
		where 1=1
		<if test='userFlow!=null and userFlow!=""'>
			and Attend_UserID = #{userFlow}
		</if>
		<if test='nowDay!=null and nowDay!=""'>
			and Attend_Date = #{nowDay}
		</if>
		and Attend_Time is not null and Attend_Time !=''
		ORDER by ATTEND_TIME DESC
	</select>

	<insert id="addAttendance" parameterType="java.util.Map">
		insert into Res_Attendance(Record_Flow,Attend_UserID,Attend_UserName,Attend_Date,Attend_Time,Attend_Local,
		Record_Status,Create_Time,Create_UserID,Self_Remarks)
		values(#{recordFlow},#{userFlow},#{userName},#{attendDate},#{attendTime},#{attendLocal},
		'0',#{createTime},#{userFlow},#{selfRemarks})
	</insert>

	<update id="addAttendanceDetail" parameterType="java.util.Map">
		insert into Res_Attendance_Detail(Record_Flow,Attendance_Flow,Attend_UserID,Attend_UserName,Attend_Date,
		Attend_Time,Attend_Local,Self_Remarks,Record_Status,Create_Time,Create_UserID)
		values(#{recordFlow},#{attendanceFlow},#{userFlow},#{userName},#{attendDate},#{attendTime},#{attendLocal},
		#{selfRemarks},'0',#{createTime},#{userFlow})
	</update>
</mapper>
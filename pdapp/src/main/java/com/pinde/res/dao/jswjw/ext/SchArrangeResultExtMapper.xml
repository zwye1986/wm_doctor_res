<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinde.res.dao.jswjw.ext.SchArrangeResultExtMapper">
	<select id="checkResultDate" parameterType="java.util.Map" resultMap="com.pinde.sci.dao.base.SchArrangeResultMapper.BaseResultMap">
		select *
        from sch_arrange_result
		where record_status = 'Y'
		and doctor_flow = #{doctorFlow}
		and (
			(
				sch_start_date <![CDATA[<=]]> #{startDate}
				and  sch_end_date >= #{startDate}
			)
			or
			(
				sch_start_date <![CDATA[<=]]> #{endDate}
				and  sch_end_date >= #{endDate}
			)
			or
			(
				sch_start_date <![CDATA[>=]]> #{startDate}
				and  sch_end_date <![CDATA[<=]]> #{endDate}
			)
		)
		<if test='subDeptFlow!=null and subDeptFlow!=""'>
			and result_flow != #{subDeptFlow}
		</if>
		<if test='rotationFlow!=null and rotationFlow!=""'>
			and rotation_flow = #{rotationFlow}
		</if>
	</select>
	<select id="searchSchArrangeResults" parameterType="java.util.Map" resultMap="com.pinde.sci.dao.base.SchArrangeResultMapper.BaseResultMap">
		select *
        from sch_arrange_result
		where record_status = 'Y'
		and doctor_flow = #{doctorFlow}
        <if test='startDate!=null and startDate!=""'>
            and sch_end_Date <![CDATA[<=]]> #{startDate}
        </if>
		<if test='rotationFlow!=null and rotationFlow!=""'>
			and rotation_flow = #{rotationFlow}
		</if>
	</select>
	<select id="getResultByDeptFlow" parameterType="java.util.Map" resultMap="com.pinde.sci.dao.base.SchArrangeResultMapper.BaseResultMap">
		select *
        from sch_arrange_result
		where record_status = 'Y'
		and doctor_flow = #{doctorFlow}
		and SCH_START_DATE <![CDATA[<=]]>to_char(sysdate,'yyyy-MM-dd')
		and SCH_END_DATE <![CDATA[>=]]>to_char(sysdate,'yyyy-MM-dd')
		<if test="deptFlows!=null and deptFlows.size()>0">
			and DEPT_FLOW IN
			<foreach collection="deptFlows" close=")" item="deptFlow" open="(" separator=",">
				#{deptFlow}
			</foreach>
		</if>
	</select>
	<resultMap type="HashMap" id="resultCountMap">
		<result property="key" column="DOCTOR_FLOW" javaType="string"/>
		<result property="value" column="RESULT_COUNT" javaType="java.math.BigDecimal"/>
	</resultMap>
	<select id="countResultByUser" resultMap="resultCountMap">
		SELECT DOCTOR_FLOW,COUNT(*) RESULT_COUNT
        FROM SCH_ARRANGE_RESULT
		WHERE DOCTOR_FLOW IN
		<foreach collection="userFlows" item="userFlow" open="(" separator="," close=")">
			#{userFlow}
		</foreach>
		AND RECORD_STATUS = 'Y'
		GROUP BY DOCTOR_FLOW
	</select>
	<resultMap id="resultExtMap" type="com.pinde.core.model.SchArrangeResultExt"
			   extends="com.pinde.sci.dao.base.SchArrangeResultMapper.BaseResultMap">
		<association property="process" javaType="com.pinde.core.model.ResDoctorSchProcess"
					 resultMap="com.pinde.sci.dao.base.ResDoctorSchProcessMapper.BaseResultMap"></association>
	</resultMap>
	<select id="getResults" resultMap="resultExtMap">
		select sar.*,rdsp.*
        from sch_arrange_result sar, res_doctor_sch_process rdsp
		where sar.record_status = 'Y'
		and rdsp.record_status = 'Y'
		and sar.result_flow = rdsp.sch_result_flow

		<if test='userFlow!=null and userFlow!=""'>
			and sar.doctor_flow = #{userFlow}
		</if>

		<if test='resultFlow!=null and resultFlow!=""'>
			and sar.result_flow = #{resultFlow}
		</if>

		<if test='processFlow!=null and processFlow!=""'>
			and rdsp.process_flow = #{processFlow}
		</if>
	</select>
	<update id="updateResultHaveAfter">
		update sch_arrange_result sar
		set have_after_pic = #{haveAfterPic}
		WHERE sar.record_status = 'Y'
		and sar.doctor_flow = #{operUserFlow}
		and exists (select 1
		from sch_rotation_dept dept
		where sar.standard_group_flow = dept.group_flow
		AND sar.standard_dept_id = dept.standard_dept_id
		and dept.record_flow = #{schRotationDeptFlow})
	</update>

	<!--<select id="queryRotationPlan" resultType="java.lang.String">
		SELECT
			sdd.sch_month
		FROM
			sch_doctor_dept sdd
		LEFT JOIN sch_rotation_dept srd ON sdd.group_flow = srd.group_flow
		AND sdd.standard_dept_id = srd.standard_dept_id
		WHERE
			sdd.record_status = 'Y'
		AND doctor_flow = #{userFlow}
		AND srd.RECORD_FLOW = #{deptFlow}
	</select>-->

	<select id="queryRotationPlan" resultType="java.lang.String">
		SELECT
			sch_month
		FROM
			sch_doctor_dept
		WHERE
			record_status = 'Y'
		AND RECORD_FLOW = #{deptFlow}
	</select>

	<select id="queryStudentsFilldDta" resultType="java.lang.Integer">
		select count(1) from RES_REC
		where RECORD_STATUS = 'Y'
		AND OPER_USER_FLOW =  #{doctorFlow}
		AND REC_TYPE_ID in ('CaseRegistry','DiseaseRegistry','SkillRegistry','OperationRegistry','CampaignRegistry')
		AND MODIFY_TIME >=  #{startTime}
		AND #{endTime} >= MODIFY_TIME
	</select>

	<select id="queryDoctorUnLockDate" resultMap="com.pinde.sci.dao.base.DoctorUntiedRecordingMapper.BaseResultMap">
		select * from DOCTOR_UNTIED_RECORDING
		where RECORD_STATUS = 'Y'
		AND LOCK_STATUS = 'UnLock'
		AND DOCTOR_FLOW = #{doctorFlow}
		ORDER BY MODIFY_TIME DESC
	</select>

	<select id="deptDoctorAllWorkDetailByNow"   resultMap="com.pinde.sci.dao.base.JsresDoctorDeptDetailMapper.BaseResultMap">
         SELECT sys_guid() RECORD_FLOW ,
           A.RECRUIT_FLOW,
           A.DOCTOR_FLOW,
           A.CAT_SPE_ID,
           A.CAT_SPE_NAME,
           A.SPE_ID,
           A.SPE_NAME,
           A.TRAIN_YEAR,
           A.SESSION_NUMBER,
           A.ROTATION_FLOW,
           A.RECORD_FLOW SCH_STANDARD_DEPT_FLOW,
           A.GROUP_FLOW ,
           A.STANDARD_DEPT_ID,
           A.STANDARD_DEPT_NAME,
           A.SCH_MONTH,
           A.ORG_FLOW,
           A.ORG_NAME,
           A.COMPLETE_NUM,
           A.OUT_COMPLETE_NUM,
           A.IN_COMPLETE_NUM,
           A.AUDIT_NUM,
           A.IS_SHORT,
           TO_CHAR(A.REQ_NUM) REQ_NUM,
           TO_CHAR(A.OLD_REQ_NUM) OLD_REQ_NUM,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(CASE WHEN ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(OUT_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END OUT_COMPLETE_BI,
           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE

              TO_CHAR(CASE WHEN ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100>100 THEN 100 ELSE ROUND(IN_COMPLETE_NUM / REQ_NUM, 2) * 100 END)
           END IN_COMPLETE_BI,

           CASE
             WHEN REQ_NUM = 0 THEN
              '-'
             ELSE
              TO_CHAR(ROUND(CASE
                              WHEN REQ_NUM != 0 AND COMPLETE_NUM = 0 THEN
                               0
                              WHEN COMPLETE_NUM != 0 THEN
                               AUDIT_NUM / COMPLETE_NUM
                              ELSE
                               0
                            END,
                            2) * 100)
           END AUDIT_BI,
           'Y',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           to_char(sysdate, 'YYYYMMDDHH24MISS'),
           'System',
           IS_ADD
      FROM (SELECT RD.RECRUIT_FLOW,
                   RD.DOCTOR_FLOW,
                   RD.CAT_SPE_ID,
                   RD.CAT_SPE_NAME,
                   RD.SPE_ID,
                   RD.SPE_NAME,
                   RD.TRAIN_YEAR,
                   RD.SESSION_NUMBER,
                   RD.ROTATION_FLOW,
                   SRD.RECORD_FLOW,
                   SRD.GROUP_FLOW,
                   SRD.STANDARD_DEPT_ID,
                   SRD.STANDARD_DEPT_NAME,
                   SRD.SCH_MONTH,
                   RD.ORG_FLOW,
                   RD.ORG_NAME,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0)) COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.IN_COMPLETE_NUM, 0)) IN_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.COMPLETE_NUM, 0) -
                           NVL(COMP.IN_COMPLETE_NUM, 0)) OUT_COMPLETE_NUM,
                   TO_CHAR(NVL(COMP.AUDIT_NUM, 0)) AUDIT_NUM,
                   case
                     when (SELECT COUNT(1)
                             FROM sch_doctor_dept sdd
                            WHERE sdd.record_status = 'Y'
                              AND sdd.doctor_flow = RD.doctor_flow
                              AND sdd.rotation_flow = RD.rotation_flow
                              and sdd.group_flow = srd.group_flow
                              and sdd.standard_dept_id = srd.standard_dept_id
                              AND sdd.org_flow = RD.org_flow) > 0 then
                      'Y'
                     else
                      'N'
                   end is_short,
                   NVL((CASE
                         WHEN RD.cat_spe_id = 'DoctorTrainingSpe' AND
                              RD.session_number >= '2015' AND
                              (RD.train_year = 'OneYear' OR
                              RD.train_year = 'TwoYear') AND
                              (SELECT COUNT(1)
                                 FROM sch_doctor_dept sdd
                                WHERE sdd.record_status = 'Y'
                                  AND sdd.doctor_flow = RD.doctor_flow
                                  AND sdd.rotation_flow = RD.rotation_flow
                                  AND sdd.org_flow = RD.org_flow) > 0 THEN
                          SUM(NVL(ROUND((CASE
                                          WHEN NVL(SRD.SCH_MONTH, 0) = 0 THEN
                                           0
                                          ELSE
                                           NVL(SDD.SCH_MONTH, 0) / SRD.SCH_MONTH * REQ.REQ_NUM
                                        END),
                                        0),
                                  0))
                         ELSE
                          SUM(REQ.REQ_NUM)
                       END),
                       0) AS REQ_NUM,
                   NVL(SUM(REQ.REQ_NUM), 0) OLD_REQ_NUM,
                   CASE WHEN IC.QTY>0 THEN 'Y'
                     ELSE 'N'
                       END IS_ADD
              FROM res_doctor_recruit RD
              LEFT JOIN SCH_ROTATION_DEPT SRD
                ON RD.ROTATION_FLOW = SRD.ROTATION_FLOW
               AND SRD.ORG_FLOW IS NULL
               AND SRD.RECORD_STATUS = 'Y'
              LEFT JOIN SCH_ROTATION_DEPT_REQ REQ
                ON REQ.REL_RECORD_FLOW = SRD.RECORD_FLOW
               AND REQ.RECORD_STATUS = 'Y'
               AND REQ.REC_TYPE_ID IN
                   ('CaseRegistry',
                    'DiseaseRegistry',
                    'SkillRegistry',
                    'OperationRegistry',
                    'CampaignRegistry')
              LEFT JOIN SCH_DOCTOR_DEPT SDD
                ON SDD.GROUP_FLOW = SRD.GROUP_FLOW
               AND SDD.STANDARD_DEPT_ID = SRD.STANDARD_DEPT_ID
               AND SDD.ORG_FLOW = RD.ORG_FLOW
               AND SDD.DOCTOR_FLOW = RD.DOCTOR_FLOW
               AND SDD.RECORD_STATUS = 'Y'
              LEFT JOIN (SELECT COUNT(1) COMPLETE_NUM,
                               RR.OPER_USER_FLOW,
                               rr.SCH_ROTATION_DEPT_FLOW,
                               NVL(COUNT(RR.AUDIT_STATUS_ID), 0) AUDIT_NUM,
                               SUM(CASE
                                     WHEN NVL((SELECT COUNT(1)
                                                FROM RES_DOCTOR_SCH_PROCESS SAR
                                               WHERE SAR.RECORD_STATUS = 'Y'
                                                 AND SAR.USER_FLOW =
                                                     RR.OPER_USER_FLOW
                                                 AND SAR.PROCESS_FLOW=RR.PROCESS_FLOW
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') <![CDATA[<=]]>
                                                     SAR.SCH_END_DATE
                                                 AND TO_CHAR(TO_DATE(RR.OPER_TIME,
                                                                     'YYYYMMDDHH24MISS'),
                                                             'YYYY-MM-DD') >=
                                                     SAR.SCH_START_DATE),
                                              0) > 0 THEN
                                      1
                                     ELSE
                                      0
                                   END) IN_COMPLETE_NUM
                          FROM RES_REC rr
                         INNER JOIN SCH_ROTATION_DEPT srd
                            ON rr.SCH_ROTATION_DEPT_FLOW = srd.RECORD_FLOW
                         WHERE rr.RECORD_STATUS = 'Y'
                           AND srd.RECORD_STATUS = 'Y'
                           AND rr.REC_TYPE_ID IN
                               ('CaseRegistry',
                                'DiseaseRegistry',
                                'SkillRegistry',
                                'OperationRegistry',
                                'CampaignRegistry')
                         GROUP BY rr.SCH_ROTATION_DEPT_FLOW,
                                  RR.OPER_USER_FLOW) COMP
                ON COMP.SCH_ROTATION_DEPT_FLOW = srd.record_flow
               and COMP.OPER_USER_FLOW = RD.DOCTOR_FLOW
               LEFT JOIN (
                 SELECT R.DOCTOR_FLOW,
                        R.ROTATION_FLOW,
                        D.RECORD_FLOW,
                        COUNT(1) QTY
                   FROM SCH_ARRANGE_RESULT R
                   LEFT JOIN SCH_ROTATION_DEPT D
                     ON R.STANDARD_DEPT_ID = D.STANDARD_DEPT_ID
                    AND D.GROUP_FLOW = R.STANDARD_GROUP_FLOW
                  WHERE R.RECORD_STATUS = 'Y'
                    AND D.RECORD_STATUS = 'Y'
                    AND R.SCH_END_DATE <![CDATA[<=]]> #{applyYear}||'-05-31'
                  GROUP BY R.DOCTOR_FLOW, R.ROTATION_FLOW, D.RECORD_FLOW
               ) IC
               ON IC.RECORD_FLOW= srd.record_flow
               and IC.DOCTOR_FLOW = RD.DOCTOR_FLOW
               AND IC.ROTATION_FLOW=SRD.ROTATION_FLOW
             WHERE RD.RECORD_STATUS = 'Y'
        and rd.RECRUIT_FLOW =#{recruitFlow}
        and rd.DOCTOR_FLOW =#{doctorFlow}
               AND RD.AUDIT_STATUS_ID = 'Passed'
             GROUP BY RD.RECRUIT_FLOW,
                      RD.DOCTOR_FLOW,
                      RD.CAT_SPE_ID,
                      RD.CAT_SPE_NAME,
                      RD.SPE_ID,
                      RD.SPE_NAME,
                      RD.TRAIN_YEAR,
                      RD.SESSION_NUMBER,
                      RD.ROTATION_FLOW,
                      SRD.RECORD_FLOW,
                      SRD.GROUP_FLOW,
                      SRD.STANDARD_DEPT_ID,
                      SRD.STANDARD_DEPT_NAME,
                      SRD.SCH_MONTH,
                      RD.ORG_FLOW,
                      RD.ORG_NAME,
                      COMP.COMPLETE_NUM,
                      COMP.IN_COMPLETE_NUM,
                      COMP.AUDIT_NUM,
                      IC.QTY) A
    </select>

    <!-- 查询轮转计划最早的开始时间 -->
    <select id="getSchMinStartDate" parameterType="String" resultType="String">
        SELECT
            MIN (SCH_START_DATE)
        FROM
            SCH_ARRANGE_RESULT
        WHERE
            RECORD_STATUS = 'Y'
        AND DOCTOR_FLOW = #{doctorFlow}
        <if test="rotationFlow != null and rotationFlow != ''">
            AND ROTATION_FLOW = #{rotationFlow}
        </if>
    </select>

    <!-- 查询学员轮转计划组总月数及条数 -->
    <select id="getDoctorSchArrange" parameterType="map" resultType="map">
        SELECT
            TO_CHAR(NVL(SUM(SCH_MONTH), 0)) AS REAL_MONTH,
            TO_CHAR(NVL(COUNT(1), 0)) AS SCH_COUNT
        FROM
            SCH_ARRANGE_RESULT
        WHERE
            RECORD_STATUS = 'Y'
        AND DOCTOR_FLOW = #{doctorFlow}
        AND STANDARD_GROUP_FLOW = #{standardGroupFlow}
        AND ROTATION_FLOW = #{rotationFlow}
        AND STANDARD_DEPT_ID = #{standardDeptId}
    </select>

    <resultMap id="docResultsMap" type="HashMap">
        <result property="userName" column="user_name" javaType="string"/>
        <result property="trainingTypeName" column="training_Type_name" javaType="string"/>
        <result property="trainingSpeName" column="training_spe_name" javaType="string"/>
        <result property="sessionNumber" column="session_number" javaType="string"/>
        <result property="graduationYear" column="graduation_year" javaType="string"/>
        <result property="doctorFlow" column="doctor_flow" javaType="string"/>
        <result property="orgName" column="org_name" javaType="string"/>
        <result property="orgNameAll" column="ORG_NAME_ALL" javaType="string"/>
        <result property="doctorTypeName" column="doctor_type_name" javaType="string"/>
        <result property="jointOrgName" column="joint_org_name" javaType="string"/>
        <result property="doctorTypeName" column="doctor_type_name" javaType="string"/>
    </resultMap>

    <select id="searchDocResultsListNew" parameterType="java.util.Map" resultMap="docResultsMap">
        select u.USER_NAME user_name,dr.TRAINING_TYPE_NAME training_Type_name,dr.TRAINING_SPE_NAME training_spe_name,
        dr.SESSION_NUMBER session_number,dr.DOCTOR_Flow doctor_flow,rdr.graduation_year graduation_year,dr.org_name org_name
        from RES_DOCTOR dr
        inner join SYS_USER u
        on dr.DOCTOR_FLOW = u.USER_FLOW
        left join (
        select a.* , ROW_NUMBER() OVER ( PARTITION BY doctor_flow order by create_time desc) as rn
        from RES_DOCTOR_RECRUIT a
        where AUDIT_STATUS_ID='Passed' and RECORD_STATUS= 'Y'
        ) rdr on dr.DOCTOR_FLOW =  rdr.DOCTOR_FLOW
        and rn=1
        where dr.RECORD_STATUS= 'Y' and u.RECORD_STATUS= 'Y' and rdr.record_status='Y'
        AND NOT EXISTS (
        SELECT
        1
        FROM
        RES_DOCOTR_DELAY_TETURN T
        WHERE
        T.RECORD_STATUS = 'Y'
        AND T.TYPE_ID = 'ReturnTraining'
        AND T.AUDIT_STATUS_ID = '1'
        AND T.SESSION_NUMBER = rdr.SESSION_NUMBER
        AND T.DOCTOR_FLOW = DR.DOCTOR_FLOW
        )
        <if test='deptFlow!=null and deptFlow!=""'>
            and exists
            (select null
            from res_doctor_sch_process p
            where p.RECORD_STATUS = 'Y'
            and p.user_flow = dr.doctor_flow
            AND (EXISTS
            (SELECT NULL
            FROM SYS_USER_DEPT sud
            WHERE sud.RECORD_STATUS = 'Y'
            AND sud.USER_FLOW = #{kzrFlow}
            AND p.DEPT_FLOW = sud.DEPT_FLOW) OR
            p.DEPT_FLOW = #{deptFlow}))
        </if>
        <if test="deptList!=null and deptList.size>0">
            and exists
            (select null
            from res_doctor_sch_process p
            where p.RECORD_STATUS = 'Y'
            and p.user_flow = dr.doctor_flow
            AND (EXISTS
            (SELECT NULL
            FROM SYS_USER_DEPT sud
            WHERE sud.RECORD_STATUS = 'Y'
            AND sud.USER_FLOW = #{kzrFlow}
            AND p.DEPT_FLOW = sud.DEPT_FLOW) OR
            p.DEPT_FLOW in
            <foreach collection="deptList" open="(" separator="," close=")" item="item">#{item.deptFlow}</foreach>))
        </if>
        <if test='userName!=null and userName!=""'>
            and u.USER_NAME like CONCAT(CONCAT('%', #{userName}),'%')
        </if>
        <if test='trainingTypeId!=null and trainingTypeId!=""'>
            and dr.TRAINING_TYPE_ID = #{trainingTypeId}
        </if>
        <if test='trainingSpeId!=null and trainingSpeId!=""'>
            and dr.TRAINING_SPE_ID = #{trainingSpeId}
        </if>
        <if test="docTypeList!=null and docTypeList.size>0">
            and dr.DOCTOR_TYPE_ID in
            <foreach collection="docTypeList" open="(" separator="," close=")" item="item">#{item}</foreach>
        </if>
        <if test='sessionNumber!=null and sessionNumber!=""'>
            and dr.SESSION_NUMBER = #{sessionNumber}
        </if>
        <if test='graduationYear!=null and graduationYear!=""'>
            and rdr.graduation_year = #{graduationYear}
        </if>
        <choose >
            <when test="jointOrgFlowList!=null and jointOrgFlowList.size>0 and baseFlag !=null and baseFlag !=''">
                and dr.SECOND_ORG_FLOW IN
                <foreach collection="jointOrgFlowList" open="(" separator="," close=")" item="item">#{item}</foreach>
            </when>
            <when test="jointOrgFlowList!=null and jointOrgFlowList.size>0 and (baseFlag == null or baseFlag == '')">
                and (rdr.ORG_FLOW in
                <foreach collection="jointOrgFlowList" open="(" separator="," close=")" item="item">#{item}</foreach>
                or rdr.JOINT_ORG_FLOW in
                <foreach collection="jointOrgFlowList" open="(" separator="," close=")" item="item">#{item}</foreach>)
            </when>
        </choose>

        order by dr.SESSION_NUMBER desc,dr.TRAINING_Type_ID,dr.TRAINING_SPE_ID,u.user_flow
    </select>

    <select id="searchSchArrangeResultByMap" parameterType="java.util.Map" resultMap="com.pinde.sci.dao.base.SchArrangeResultMapper.BaseResultMap">
        SELECT *
        FROM SCH_ARRANGE_RESULT sar
        WHERE RECORD_STATUS = 'Y'
        AND DOCTOR_FLOW = #{doctorFlow}
        <if test='schStartDate!=null and schStartDate!=""'>
            AND SCH_END_DATE >= #{schStartDate}
        </if>
        <if test='schEndDate!=null and schEndDate!=""'>
            AND SCH_END_DATE <![CDATA[<=]]> #{schEndDate}
        </if>
        <if test='deptFlow!=null and deptFlow!=""'>
            AND (EXISTS
            (SELECT NULL
            FROM SYS_USER_DEPT sud
            WHERE sud.RECORD_STATUS = 'Y'
            AND sud.USER_FLOW = #{kzrFlow}
            AND sar.DEPT_FLOW = sud.DEPT_FLOW) OR
            sar.DEPT_FLOW = #{deptFlow})
        </if>
    </select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinde.res.dao.njmu.ext.CategoryProgressMapper">
	<resultMap id="categoryMap" type="hashmap">
        <result column="cataFlow"  property="cataFlow" javaType="java.lang.String"/>
        <result column="neededNum"  property="neededNum" javaType="java.lang.String"/>
        <result column="finishedNum"  property="finishedNum" javaType="java.lang.String"/>
        <result column="auditedNum"  property="auditedNum" javaType="java.lang.String"/>
        <result column="progress"  property="progress" javaType="java.lang.String"/>
        <result column="labelsNum"  property="labelsNum" javaType="java.lang.String"/>
   	</resultMap>
	<select id="mrProgress" parameterType="string" resultMap="categoryMap">
		WITH
		UserCycleSecTemp AS (SELECT CySecID FROM UserCycleSec WHERE UCSID = ${deptFlow}),
		BigHistoryCaseNeed AS (SELECT BHID as cataFlow, RequireNumber AS neededNum, CySecID, '大病历' AS title
					FROM BigHistoryCase),
		Rec_BigHistoryFinish AS (SELECT COUNT(*) AS finishedNum, cysecid, userid ,BHID
					FROM Rec_BigHistory
						LEFT JOIN BigHistoryCase ON BigHistoryCase.bhid = Rec_BigHistory.fromid
					WHERE userid = ${userFlow}
					GROUP BY userid, cysecid ,BHID),
		Rec_BigHistoryAudit AS (SELECT COUNT(*) AS auditedNum, cysecid, userid ,BHID
		FROM Rec_BigHistory
			LEFT JOIN BigHistoryCase ON BigHistoryCase.bhid = Rec_BigHistory.fromid
		WHERE userid = ${userFlow} and CheckStatus = 1
		GROUP BY userid, cysecid ,BHID)
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (order by T.cataFlow desc)AS Row, T.*  from 
		(select cataFlow,title,neededNum,isnull(finishedNum,0) as finishedNum, isnull(auditedNum,0) as auditedNum
		,case when neededNum = 0 then 100
		else isnull(ROUND(CAST(finishedNum AS FLOAT) / CAST(neededNum AS FLOAT) * 100, 2), 0)
		end  AS progress 
		from UserCycleSecTemp
		left join BigHistoryCaseNeed on BigHistoryCaseNeed.CySecID = UserCycleSecTemp.CySecID
		left join Rec_BigHistoryFinish on Rec_BigHistoryFinish.CySecID = UserCycleSecTemp.CySecID  and BigHistoryCaseNeed.cataFlow = Rec_BigHistoryFinish.BHID
		left join Rec_BigHistoryAudit on Rec_BigHistoryAudit.CySecID =  UserCycleSecTemp.CySecID  and BigHistoryCaseNeed.cataFlow = Rec_BigHistoryAudit.BHID
		where cataflow is not null
		group by cataFlow,title,neededNum,finishedNum,auditedNum)
		as T) TT
		WHERE TT.Row between ${startRow} and ${endRow}
		ORDER BY title
	</select>
	<select id="diseaseProgress" parameterType="string" resultMap="categoryMap">
		WITH
		UserCycleSecTemp AS (SELECT CySecID FROM UserCycleSec WHERE UCSID = ${deptFlow}),
		CaseClassNeed AS (SELECT CAID as cataFlow, CaRequireNumber AS neededNum, CySecID,CaName AS title
					FROM CaseClass),
		Rec_CaseClassFinish AS (SELECT COUNT(*) AS finishedNum, cysecid, userid ,caid
					FROM Rec_CaseClass
						LEFT JOIN CaseClass ON CaseClass.CAID = Rec_CaseClass.fromid
					WHERE userid = ${userFlow}
					GROUP BY userid, cysecid, caid),
		Rec_CaseClassAudit AS (SELECT COUNT(*) AS auditedNum, cysecid, userid ,caid
		FROM Rec_CaseClass
			LEFT JOIN CaseClass ON CaseClass.CAID = Rec_CaseClass.fromid
		WHERE userid = ${userFlow} and CheckStatus = 1
		GROUP BY userid, cysecid ,caid)
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (order by T.cataFlow desc)AS Row, T.*  from 
		(select cataFlow,title,neededNum,isnull(finishedNum,0) as finishedNum, isnull(auditedNum,0) as auditedNum 
		,case when neededNum = 0 then 100
		else isnull(ROUND(CAST(finishedNum AS FLOAT) / CAST(neededNum AS FLOAT) * 100, 2), 0)
		end  AS progress
		from UserCycleSecTemp
		left join CaseClassNeed on CaseClassNeed.CySecID = UserCycleSecTemp.CySecID
		left join Rec_CaseClassFinish on Rec_CaseClassFinish.CySecID = UserCycleSecTemp.CySecID and CaseClassNeed.cataFlow = Rec_CaseClassFinish.CaID
		left join Rec_CaseClassAudit on Rec_CaseClassAudit.CySecID =  UserCycleSecTemp.CySecID and CaseClassNeed.cataFlow = Rec_CaseClassAudit.CaID
		where cataflow is not null
		group by cataFlow,title,neededNum,finishedNum,auditedNum)
		as T) TT
		WHERE TT.Row between ${startRow} and ${endRow}
		ORDER BY title
	</select>
	<select id="skillProgress" parameterType="string" resultMap="categoryMap">
		WITH
		UserCycleSecTemp AS (SELECT CySecID FROM UserCycleSec WHERE UCSID = ${deptFlow}),
		OperateSkillNeed AS (SELECT OPID as cataFlow, OpRequireNumber AS neededNum, CySecID,OpClass AS title
					FROM OperateSkill),
		Rec_OperateSkillFinish AS (SELECT COUNT(*) AS finishedNum, cysecid, userid ,opid
					FROM Rec_OperateSkill
						LEFT JOIN OperateSkill ON OperateSkill.OPID = Rec_OperateSkill.fromid
					WHERE userid = ${userFlow}
					GROUP BY userid, cysecid,opid),
		Rec_OperateSkillAudit AS (SELECT COUNT(*) AS auditedNum, cysecid, userid,opid
		FROM Rec_OperateSkill
			LEFT JOIN OperateSkill ON OperateSkill.OPID = Rec_OperateSkill.fromid
		WHERE userid = ${userFlow} and CheckStatus = 1
		GROUP BY userid, cysecid,opid)
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (order by T.cataFlow desc)AS Row, T.*  from 
		(select cataFlow,title,neededNum,isnull(finishedNum,0) as finishedNum, isnull(auditedNum,0) as auditedNum 
		,case when neededNum = 0 then 100
		else isnull(ROUND(CAST(finishedNum AS FLOAT) / CAST(neededNum AS FLOAT) * 100, 2), 0)
		end  AS progress
		from UserCycleSecTemp
		left join OperateSkillNeed on OperateSkillNeed.CySecID = UserCycleSecTemp.CySecID
		left join Rec_OperateSkillFinish on Rec_OperateSkillFinish.CySecID = UserCycleSecTemp.CySecID and OperateSkillNeed.cataFlow = Rec_OperateSkillFinish.opid
		left join Rec_OperateSkillAudit on Rec_OperateSkillAudit.CySecID =  UserCycleSecTemp.CySecID and OperateSkillNeed.cataFlow = Rec_OperateSkillAudit.opid
		where cataflow is not null
		group by cataFlow,title,neededNum,finishedNum,auditedNum)
		as T) TT
		WHERE TT.Row between ${startRow} and ${endRow}
		ORDER BY title
	</select>
	<select id="operationProgress" parameterType="string" resultMap="categoryMap">
		WITH
		UserCycleSecTemp AS (SELECT CySecID FROM UserCycleSec WHERE UCSID = ${deptFlow}),
		OPSSkillNeed AS (SELECT OPSID as cataFlow, OPSRequireNumber AS neededNum, CySecID,OPSName AS title
					FROM OPSSkill),
		Rec_POSSkillFinish AS (SELECT COUNT(*) AS finishedNum, cysecid, userid ,opsid
					FROM Rec_POSSkill
						LEFT JOIN OPSSkill ON OPSSkill.OPSID = Rec_POSSkill.fromid
					WHERE userid = ${userFlow}
					GROUP BY userid, cysecid ,opsid),
		Rec_POSSkillAudit AS (SELECT COUNT(*) AS auditedNum, cysecid, userid ,opsid
		FROM Rec_POSSkill
			LEFT JOIN OPSSkill ON OPSSkill.OPSID = Rec_POSSkill.fromid
		WHERE userid = ${userFlow} and CheckStatus = 1
		GROUP BY userid, cysecid ,opsid)
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (order by T.cataFlow desc)AS Row, T.*  from 
		(select cataFlow,title,neededNum,isnull(finishedNum,0) as finishedNum, isnull(auditedNum,0) as auditedNum 
		,case when neededNum = 0 then 100
		else isnull(ROUND(CAST(finishedNum AS FLOAT) / CAST(neededNum AS FLOAT) * 100, 2), 0)
		end  AS progress
		from UserCycleSecTemp
		left join OPSSkillNeed on OPSSkillNeed.CySecID = UserCycleSecTemp.CySecID
		left join Rec_POSSkillFinish on Rec_POSSkillFinish.CySecID = UserCycleSecTemp.CySecID and OPSSkillNeed.cataFlow = Rec_POSSkillFinish.opsid
		left join Rec_POSSkillAudit on Rec_POSSkillAudit.CySecID =  UserCycleSecTemp.CySecID and OPSSkillNeed.cataFlow = Rec_POSSkillAudit.opsid
		where cataflow is not null
		group by cataFlow,title,neededNum,finishedNum,auditedNum)
		as T) TT
		WHERE TT.Row between ${startRow} and ${endRow} 
		ORDER BY title
	</select>
	<select id="activityProgress" parameterType="string" resultMap="categoryMap">
	</select>
	<select id="summaryProgress" parameterType="string" resultMap="categoryMap">
	</select>
</mapper>